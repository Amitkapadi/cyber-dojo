
DockerTmpRunner - DockerKatasRunner
------------------------------------
Both need to write to katas/ but only to save results.
Be that via a data-container or a volume-mount
Be that via a microservice or not


But KatasRunner also needs to *read* from katas/

One issue is: what are the date-time stamps on the files inside the run-container?
o) tmp-runner   == brand new
o) katas-runner == as from last time if the file didn't change

One issue is: what files are actually inside the run-container?
o) tmp-runner   == only the visible files.
o) katas-runner == everything, .o file, executables, etc.

What are the trade offs?

B = Browser
V = volume on host
D = data-container
L = local volume
R = run-container
P = tar-pipe

katas-volume-runner
-------------------
changed files are copied into katas/...
cyber-dojo.sh run directly in katas/... inside container
   - uid dependency on host
   - direct coupling between the runner and the katas/... folder (volume mount)
        - katas/ holds src files and intermediates (eg .o files)
   - file copying
        - 1st B       -> V:katas/... (changed only, preserve date-time stamps) RUN+DIFF
        - <<RUN>>
        - 2nd output  -> V:katas/...
        - <<GIT-COMMIT>>
        - 3rd output  -> B


katas-data-container-runner (can't volume-mount)
---------------------------
changed files are copied into katas sub-folder
*all* files in katas/... are tar piped into container in tmp/...
cyber-dojo.sh runs in tmp/... inside container
*all* files in container in tmp/... are tar|piped *back* to katas/...
    - no uid dependency on host
    - indirect coupling between runner and katas/... (via path argument)
        - katas holds src files and extra files (eg .o files, executables)
    - file copying
        - 1st B           -> D:katas/... (changed only, preserve date-time stamps)
      P - 2nd D:katas/... -> R:tmp/...   (all)
        - <<RUN>>
      P - 3rd R:tmp/...   -> D:katas/... (all, preserve data-time stamps) <<<<<< TO PROVE <<<<<<<<
        - 4th output      -> D:katas
        - <<GIT-COMMIT>>
        - 5rd output      -> B
    STEP 3 IS THE CRUCIAL ONE.
    It means it's possible to avoid the volume-mount and still get
    incremental builds. This is an important use case for James.
    Not using a volume-mount means there is no dependency on hosts cyber-dojo uid
    and ownership of katas volume. Price is extra copying.
    Note that each git commit only commits visible files.
    The extra files only live 'once' in the sandbox
    Price is extra copying. Two tar pipes. Checked with James and typical
    exercise he uses (with incremental builds) has tar file of 1.6MB.
    Zipped its 400K
    Incremental build is less than one second  (23-42 ms)
    Full build is about 3-4 seconds. (1904-2568-2873 ms)
    This looks promising.


tmp-runner
----------
all files are copied into tmp/...
*all* files in tmp/... are tar piped into tmp/... in container
cyber-dojo.sh runs in tmp/... inside container
output returned
    - elsewhere output and (changed) files saved to katas
        - katas could be volume-mount on host
        - katas could be data container
    - no uid dependency on host
    - no coupling between runner and katas/...
    - file copying
        - 1st B         -> L:tmp/... (all, date-time stamps are new)
        - 2nd L:tmp/... -> C:tmp/... (all)
          <<RUN>>
        - 3rd B         -> KATAS
        - 4th output    -> KATAS
          <<GIT_COMMIT>>
        - 5th output    -> B



So I can preserve incremental makes and not have a user+uid
dependency on the host. Not that its such a big dependency.
And in its place I have to create a data container from the
katas/ folder. That makes it tricker to get at the data.
Might make it easier to accidentally delete the data container.

But thinking a good option is to just support a katas-data-container
and have no volume-mounting at all


katas-data-container runner
---------------------------
Looks promising. Might become the default!
Could then be only two runners, both using katas, one from data-container,
one from volume-mount. Former has to tar-pipe in both directions (for
security if no other reason because you can't get sub-folder restriction)
Later does not tar-pipe in either direction. volume-mount can give sub-folder
restriction.

Only if the test completes in 10 seconds are the files tar piped
directly back to their katas sub-folder. No tar file ever actually exists.
The test run becomes atomic!
If the test does not complete in 10 seconds then it as if the attempt was never made.
The only visible change is the date-time stamp (and contents) of the visible-files
copied into katas/... before the test run.
What about rights/ownership of files?
The files inside the test-container will be owned by nobody. That should
be fine, incremental makes rely on time-stamps not owner.
The files outside the test-container (katas data container) will be owned by
cyber-dojo the rails app is running as.

Note that a consequence of this is that katas-data-container will fill up
quicker because it will contain executables, .o, .a, .lib etc files.
That is, files created *during* the test.



Tar-Piping
----------
is an artefect of not being able to isolate a sub-directory when you're using
a *shared* katas-data-container for all katas/... sub-folders.

I have tried volume-mounting a sub-dir of the katas-data-container
(called cyber-dojo-katas) and it doesn't work.
Eg
   From inside the rails container which has --volumes-from cyber-dojo-katas
   $ sudo ... docker run --rm -it
              -v /usr/src/cyber-dojo/katas/4A/6C1FBFE1/spider/sandbox/:/sandbox:rw
              cyberdojofoundation/gcc_assert sh

this appears to work, but if you look inside the /sandbox folder in the new container
it is empty - it does not contain what .../katas/4A/6C1FBFE1/spider/sandbox contains
inside the cyber-dojo-katas data-container. N

It's not an issue when using a host-volume-mount because that *can* be isolated
and so there is no need for any tar-piping.



Granularity
-----------
If a data-container was created, on the fly, for a kata, then it would be
isolated. The [docker] commands in the runner.sh file would no longer accept
SRC_DIR, they would accept KATA_ID, which would be used to identify the
data-container for that kata. There would be no need for tar-piping.
Technically this means the cyber-dojo.sh file could still cd .. and get to
the code for another animal in the same kata.
But they could not gain access to the code in a different kata.
That feels right. The team has to trust each other.
Of course, the creation of the data-container *could* be for the individual
animal. It would increase the number of data-containers of course.
However, at the moment there is an increments.json file in the katas folder
which is used to speed up displaying the dashboard. It means I don't have to
get info from each animal one at a time via multiple disk accesses.
One data-container per kata is simplest for sure.
Emphasize the team. Add a common label to all kata-data-container's
So data-container granularities are
o) katas  : needs tar-pipe, 2-way=incremental, 1-way=notIncremental
o) kata   : tar-pipe 1/2-way, or no-tar-pipe and you trust your team?
o) avatar : no tar-pipe


Diff-Review
-----------
How is this affected?
At the moment a diff is generated by host_disk_katas.rb
  def tag_git_diff(avatar, was_tag, now_tag)
which simply does a git diff on a file-system.
This takes the avatar so this could easily happen inside
a docker command which used --volumes_from so the git command
being executed had access.


Download
--------
This also works at the kata level for the whole team.



