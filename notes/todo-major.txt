
o) Use docker run with volume mount to create docker-runner.
   This means
   -- creation of tar.gz files is much easier
   -- if docker is enabled I need two language_each iterations
      one for the subdirs of cyberdojo/languages
      one for the cyberdojo/language_* docker images
      On setup only display a language if it's manifest's image_name
      is present in the docker images list.

  def docker_images_names
    `docker images`.lines.each.collect{|line| line.split[0]}
  end
  def languages_each
    docker_images_names.select{|repo| repo.start_with?('cyberdojo/language_')}
  end
  def runner_run(sandbox, command, max_duration)
    kill = 9
    timed_out = 124
    cid_filename = ...
    `rm #{cid_filename}`
    language = sandbox.avatar.kata.language
    cmd = "docker run -t -i --rm" +
          " -v #{path(sandbox)}:/sandbox:rw" +
          " -v #{path(language)}:#{path(language)}:ro"
          " -w /sandbox" +
          " --cidfile=\"#{cid_filename}\"" +
          " #{language.image_name} /bin/bash -c \"timeout --signal=#{kill} #{max_duration}s #{command}\""
    `#{cmd}`
    exitstatus = $?.exitstatus
    cid = `cat #{cid_filename}`
    (exitstatus != #{timed_out}) ? `docker logs #{cid}` :
       "Terminated by the cyber-dojo server after #{max_duration} seconds."
  end

o) LinuxPaas needs method to determine if docker is installed
   def docker?
   end
   Use this to select the appropriate Runner

o) lib/Runner.rb needs renaming. To??? RawRunner.rb ?

o) create lib/DockerRunner.rb

o) Is the new Java out?
   If so, use that as base language-image
   I think all the Java-XXX languages will use the same docker image.


o) refactor so new katas save sha1 hashes
   and also put URL of server dojo into kata's manifest.
   Old dojos are still usable in old format.

o) write a script to convert a dojo in old-rb format into new-json format
   This will need to detect if the :language named in the katas manifest.rb
   (not the animals manifest) still exists on the server.
   If it does not then it could be the language has been
     - renamed
     - deleted (eg Objective-C)
   If its renamed patch the language name to the new name.
   Run it on all dojos already xferred to cyber-katas.org
   This means checking for language exist/rename/delete information
   will need to come from a .json file and not by looking at the actual server.
   If language has been renamed the information would be useful for the
      fork feature on cyber-dojo. It can intercept and patch the language name
   If the language has been deleted the information would also be useful
      since it means I cannot attempt the fork.
   If language is patched - will cyber-katas still be able to
   detect the fork from the sha1's? It needs to be able to.
   So sha1's must be solely from file contents. Sounds ok.

o) add buttons on cyber-dojo to publish a dojo to cyber-kata with tags
   on the sending server check format of dojo
   if its old-rb format then convert it *in-place* (on sending server) using script above
   send it in new-json format (tar.gz) to cyber-katas

o) can offer fork on cyber-katas if I know URL of originating dojo
   can make with $.getJSON('forker/fork'...) to it

o) this means we could get a cycle
  I publish a dojo
  Someone else links back to my dojo and adds some more traffic-lights
  Suppose they then *re*publish it!
  That should be allowed. It would be cool!
  Does create issues.
  Can't assume that inserted database information will be new
  Could be information that already exists.
  Re-publish event could add new tags.
  Tags should be recorded with the publish-event not the dojo.
  Can then see a history of "tags" added.
  Allow tags to be editable on cyber-katas?
  Want re-publish of unchanged dojo to be low-overhead
  Should be enough to check, URL,id,animals,traffic-lights per animal.

o) another problem is it opens up the possibility of
   two people trying to edit the same code at the same time
   as the same animal.
   This implies that if you click from cyber-katas to get back to
   the original dojo you should not go back to the original.
   You should never see the original's ID. Instead you should
   auto-fork and thus get a new ID. Sharing the new ID it is now your decision.
   This is great but it means it will require database+code using sha1's to
   figure out which old traffic-light the new dojo was forked from.
   New dojo will not be tied to old dojo until new dojo is published back
   onto cyber-katas

o) dojos that have had their language name changed cannot be forked.
   Need to fix this.
   Or at least detect it and either
      not publish them on cyber-katas.org
      or figure out what the new name is and patch
   Do patching on the old->new conversion?
   No since there could still be post publish name changes.

o) be careful not to expose the ids of the original dojos
   when viewing diffs on cyber-katas.org
   Create a simple fake-id->id mapping table.

o) if traffic-light's files' hashes match traffic-light 1 for
   other dojo(s) then those other dojos were forked from this
   traffic-light. Could simply offer a count of this on dashboard/diff
   Or simpler, a mark which can reveal information about the forks.
   if traffic-light's files' hashes match other traffic-lights for
   this dojo then reverts have occured.

o) open cyber-katas.org


------------------------------------------------------
I'd like an automated process that moves dojos that have
a minimum number of traffic lights and are at least N days
old onto a separate read-only cyber-dojo server.
Ideally, one that has a list of id's not to delete (eg the
refactoring dojo's ids). Info about these dojos' would be stored
in a database holding various details such as id, language, exercise,
animals, each animals traffic-light count, etc.
$ruby prune_large.rb false 25 14
reveals 1,947 katas with dojos having 25 or more traffic-lights.
http://cyber-dojo.com could offer a button to 'export' a dojo.
This would call a method on the read-only server passing the id.
The read-only server would respond by getting the id.tar.gz file via
a wget on http://cyber-dojo.com/dashboard/download/id
------------------------------------------------------
Suppose in dojo-X the frog forked from traffic-light 28
whose git hash was 2d0d2bb21ad7....
In the new dojo-Y the alligators first traffic-light will *not*
have the same hash because a git hash depends not only on the
content but on the history and date/time etc.
Even if it didn't depend on the history the content is not
exactly the same. This is because..
  o) the output file usually contains timing info.
  o) the output file's content is also in manifest.rb (which is git commited)
  o) increments.rb contains a date-time-stamp of each test
- - - - - - - - - - - - - -
However, I could create a separate sha1 hash of the "genuine" files.
Where genuine files are visible_files - [output]
Then the hash of dojo-X frog 28 would be the same as dojo-Y alligator 1
This would allow me to store these hashes in a database table and to
be able to know when any file's content has occured before (either through
a fork or coincidentally).
So a database table would need to be something like
  CREATE TABLE digests (
    sha1 CHAR(40) NOT NULL,         # '8b45e4bd1c6acb88bebf6407d16205f567e62a3e'
    id CHAR(10) NOT NULL,           # '7D2111A7D0'
    animal VARCHAR(32) NOT NULL,    # 'hippo'
    light INT,                      # 14'th traffic-light
    filename VARCHAR(127) NOT NULL, # 'fizz_buzz.hpp'
    CONSTRAINT pk PRIMARY KEY (id,animal,light,filename)
  )
  CREATE INDEX sha1_index ON digests (sha1)
- - - - -
This could also give me a way to catalogue all the initial starting positions.
This is useful since some exercises have changed their names and this causes
problems with forking.
- - - - - - - - - - - - - - - -
For the hashing I could use
  require 'digest/sha1'
  Digest::SHA1.hexdigest("some string") -> "8b45e4bd1c6acb88bebf6407d16205f567e62a3e"
  Would need a test to make sure the sha1 of a known string did not change (eg when
  upgrading Rails or Ruby)
------------------------------------------------------
Store data in json format not inspect format.
Or maybe there is a library offering a restricted eval method? Doubt it.
One option is to switch to storing (eg manifest) in manifest.json
And also to change the code that reads back. If .json file exists
then we use that. If not we rely on .rb file and eval that.
o) Install json save/read (with eval read backup) on cyber-dojo.com
   Don't need to do immediately
o) Write script to convert all existing dojos from .rb to json format.
   This will be some work. Eg increments.rb is saved with *each* commit.
   May need to simulate each commit again.
o) Copy all cyber-dojo.com dojos to new read-only server
o) Do the conversion on read-only server (so as not to drain cpu on main server)
   and ensure everything is saved in json format.
o) Forward review ids from cyber-dojo.com to read-only server...?
   On read-only server have json method 'dojo/valid_id'
   On cyber-dojo.com call this (in javascript) and if id exists
   then open a dashboard on the readonly server. Otherwise see if
   the id is on cyber-dojo.com (and if it is open dashboard there).
   This means the start/resume buttons should only be enabled if the
   id is valid on cyber-dojo.com
   The review button should be enabled if the id is valid on
   either cyber-dojo.com or the readonly server.
   Thus ids for harvested dojos (whose id is *only* on the readonly server)
   will only enable the review button.
o) Delete all old eval saved dojos from cyber-dojo.com
o) Use pure json save/read on cyber-dojo.com
A lot of work, but the result is no evals on the read-only server.
------------------------------------------------------
It will also mean the manifests for all languages and exercises
will need to be JSON'd ... but not, I don't think, on the readonly server.
DiskFile.rb could go from
  File.open(pathed_filename, 'w') { |file|
    file.write(object.inspect + "\n")
  }
to
  File.open(pathed_filename, 'w') { |file|
      file.write(JSON.unparse(object) + "\n")
    }
  }

And the filename will need changing on the calling side too.
Eg increments.rb to increments.json
Strategies?

 o) on cyber-katas.com
 o)   harvest dojos from cyber-dojo.com
 o)   write script to convert them to JSON
 o)   create database
 o)   write script to parse JSON'd dojos and populate database
 o)   create index page which feeds off database
 o)   verify dashboard and diff-dialog works ok
 o)   use git branch for this work
 o)   only problem is harvested dojos still need initial evals
 o)   that's why second part of the work is...

 o) on cyber-dojo.com
 o)   support inspect on old dojos
 o)   but use JSON on new dojos
 o)     ***can I do this***?
 o)     languages?
 o)     exercises?
 o)     forking?
 o)     resuming?
 o)   install
 o)   harvest all dojos to cyber-katas
 o)   convert them to JSON on cyber-katas as above
 o)   forward [review]s to cyber-katas (not button on test page?)


------------------------------------------------------
url = 'http://cyber-katas.org/dojo/valid_id'
$.getJSON(url, { id: id }).done(function(theId) {
  if (theId.exists) {
    ...
  }
});
------------------------------------------------------
Look into using PStore instead of DiskFile?
------------------------------------------------------
Offer a fork button on the diff-dialog?
------------------------------------------------------
