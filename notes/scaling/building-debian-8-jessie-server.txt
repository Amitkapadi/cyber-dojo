
Issue:

1) docker daemon
reports 
WARN[0000] Running modprobe bridge nf_nat br_netfilter failed with message: modprobe: WARNING: Module br_netfilter not found.
, error: exit status 1 
WARN[0000] Your kernel does not support cgroup memory limit: mountpoint for memory not found 
WARN[0000] Your kernel does not support cgroup cfs period 
WARN[0000] Your kernel does not support cgroup cfs quotas 


2) how to restrict container so it can only see its host?
Is this related to [br_netfilter not found]



====================
BUILD NEW 14.0 IMAGE
====================
I'm thinking I need to build a new image from a later kernel.
Launching a new Turnkey server. 14.0 Debian (Jessie). Ruby on Rails

Does it show default rails app?
YES

If so start to following instructions here
http://blog.cyber-dojo.org/2014/09/setting-up-your-own-cyber-dojo-server.html


$ cd /var/www
$ git clone https://JonJagger@github.com/JonJagger/cyber-dojo
$ cd /var/www/cyber-dojo/admin_scripts
$ ./pull.sh
 
  
Does this work before I've made any changes? 
$ service apache2 restart
YES


cd /etc/apache2/sites-available
cp 000-default.conf cyber-dojo.conf
sed 's/www.html/www\/cyber-dojo\/public/' < 000-default.conf > cyber-dojo.conf
cp default-ssl.conf cyber-dojo-ssl.conf
sed 's/www.html/www\/cyber-dojo\/public/' < default-ssl.conf > cyber-dojo-ssl.conf

chown    www-data:www-data /var
chown    www-data:www-data /var/www
chown -R www-data:www-data /var/www/cyber-dojo

cd /var/www/cyber-dojo
chmod g+s katas

a2ensite cyber-dojo
a2dissite railsapp
service apache2 reload



AND THE SITE IS UP
NOW TO INSTALL DOCKER


$ echo "deb http://http.debian.net/debian jessie-backports main" >> /etc/apt/sources.list.d/sources.list
DONT THINK I NEED THE ABOVE LINE

$ curl -sSL https://get.docker.com/ | sudo sh
$ docker --version
1.8.2
OK.
$ docker info
WARNING: No memory limit support
WARNING: No swap limit support
Shame.



CHECK IT WORKS
$ docker run --rm hello-world
AND WE HAVE DOCKER


Now to install one container so create page is functional

$ gpasswd -a www-data docker
$ service docker restart

$ docker pull cyberdojofoundation/gcc-4.8.4_assert
$ cd /var/www/cyber-dojo/languages
$ ./refresh_cache.rb
$ chown www-data:www-data cache.json



And WE ARE UP.


Now to put git-daemon-export-ok file into a kata

$ cd /var/www/cyber-dojo/katas
$ cd 59/944533D0/buffalo/.git
$ touch git-daemon-export-ok
$ chown www-data:www-data git-daemon-export-ok


Opened port 9418 on Turnkey dashboard


Now to install git-server

$ apt-get install -y git-daemon-run

Edited
/etc/service/git-damon/run 
as follows

#!/bin/sh
exec 2>&1
echo 'git-daemon starting'
exec chpst -ugitdaemon \
   "$(git --exec-path)"/git-daemon \
   --reuseaddr --base-path=/var/www/cyber-dojo/katas /var/www/cyber-dojo/katas

$ usermod -a -G www-data gitdaemon

Restart git daemon. How?
Ach Reboot

$ ip route show | grep docker0 | awk '{print $9}'
172.17.42.1
$ docker run -it --rm cyberdojofoundation/gcc-4.8.4_assert /bin/bash
root@971319505fd1:$ cd /tmp
root@971319505fd1:$ git clone git://172.17.42.1/59/944533D0/buffalo/.git

YES. THAT CLONES.

>>>>>>Would be nice to find a way to allow 59944533D0  (no / in middle)


How about
$ docker run -it --rm --user=www-data cyberdojofoundation/gcc-4.8.4_assert /bin/bash
root@971319505fd1:$ cd /tmp
root@971319505fd1:$ git clone git://172.17.42.1/59/944533D0/buffalo/.git
root@971319505fd1:$ cd buffalo/sandbox
root@971319505fd1:$ ./cyber-dojo.sh
root@971319505fd1:$ All tests passed
root@971319505fd1:$ whoami
root@971319505fd1:$ www-data

OK.
docker run -it --rm --user=www-data --memory=1GB cyberdojofoundation/gcc-4.8.4_assert /bin/bash
WARNING: Your kernel does not support memory limit capabilities. Limitation discarded.







Tried re-installing

Edited /etc/default/grub
From
GRUB_CMDLINE_LINUX_DEFAULT="consoleblank=0 xencons=hvc0 console=hvc0"
GRUB_CMDLINE_LINUX=
To
GRUB_CMDLINE_LINUX_DEFAULT="consoleblank=0 xencons=hvc0 console=hvc0 cgroup_enable=memory swapaccount=1"
GRUB_CMDLINE_LINUX=

$ update-grub2
$ reboot
$ docker info
Still no memory/swap
You must have to do more than just reboot.

cd /boot/grub
ls
cat grub.cfg

Says it takes settings from /etc/default/grub but it doesn't appear to have.
Says it is automatically generated by grub-mkconfig using templates
Contains line
kernel /boot/vmlinuz-3.16.0-4-amd64 root=/dev/xvda1 ro 
$ cat config-3.16.0-4-amd64
Lots of settings
$ cat CGROUP config-3.16.0-4-amd64
They all seem to be on.

https://github.com/turnkeylinux-apps/lxc/blob/master/overlay/etc/default/grub
confirms I seem to be doing the right thing
$ update-grub

cat /boot/grub/grub.cfg












Notes
=====

There is an option on git clone to specify the folder you want to clone into.
Using that in cyber-dojo servers docker run command 

Don' use git-daemon-export-all
Stick to git-daemon-export-ok per repo.
This is because on a rails-git shared server I want
to ensure the repo for cyber-dojo itself is not
available to clone from the cyber-dojo server!






