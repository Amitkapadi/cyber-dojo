
Creating cyber-dojo server inside VirtualBox.

Started from Linux Server iso image
http://www.ubuntu.com/download/server

Created new Guest in VirtualBox, called cyber-dojo server, type=Linux, accepted settings
Clicked it to start and it asked for the image
Pointed it to the iso image I downloaded.
Responded to all the questions to setup the server.
Created a user called jon with usual password (sudoer)

Kept network settings as NAT (to enable downloads)   //to Host-only-adapter.

First fixed keyboard
$ sudo dpkg-reconfigure keyboard-configuration
On 1st step look for Apple option in list but then
*also* look for apple option in subsequent list.

Followed instructions at
https://docs.docker.com/installation/ubuntulinux/

$ wget -qO- https://get.docker.com/ | sh

Recommended adding non root user to docker group as follows
$ sudo usermod -aG docker jon

Is www-data a user?
$ grep www-data /etc/passwd
Yes. So I did this

$ sudo usermod -aG docker www-data

Checking docker install
$ sudo docker run hello-world

Yes it worked.
Now simplest is to setup ssh. I will need to scp the bare repo 
at some point. On git-server
$ cd ~
$ mkdir .ssh
$ chmod 700 .ssh

Copy across credentials to git-server
$ cd ~/.ssh
$ scp id_rsa.pub jon@192.168.59.104:/home/jon/.ssh/authorized_keys

Now I can copy across the build-script
$ cd admin_scripts
$ scp setup_digital_ocean_server.sh jon@192.168.59.104:/home/jon

Now put Network back to NAT and git clone

$ cd var
$ mkdir www
$ cd www
$ git clone https://JonJagger@github.com/JonJagger/cyber-dojo


$ cd /var/www/cyber-dojo
$ cd admin_scripts
$ ./setup_digital_ocean_server.sh

ifconfig says 192.168.59.104
into browser and we have a home page :-)


<aside>
Going to be painful having to switch network to NAT to git push
and then back to Host-only-adapter to run from browser.

$ git branch -r
origin/git-server-and-docker-swarm
is listed

$ sudo git checkout origin/git-server-and-docker-swarm
works

$ git status
fails because st is not a shortcut
$ sudo git config --global alias.st status
</aside>


Create/Setup page fails.
This is because I have not run admin_scripts/pull.sh
No cache.json file languages and exercises
Recreated those manually to check
$ cd languages
$ sudo ./cache.rb
$ sudo chown www-data cache.json
$ sudo chgrp www-data cache.json
Same for exercises
Still create page wont load. 
Think it is still rights.
Still need to run pull.sh

Switched back to NAT
ran pull.sh
Trying Bridges-adapter
Didn't seem to work.
Switching back to Host-only-adapter

Looked at log
Problem in LanguagesDisplayNameSplitter.rb
   no conversion from nil to Integer (for  [])
   
I think this is because there are no languages.
Switched back to NAT
$ cd /var/www/cyber-dojo/admin_scripts
$ sudo docker pull cyberdojo/gcc-4.8.1_assert

Switch back to Host-adapter
[create] and yes, I see 
one language [C (gcc)]
one test [assert]

Obviously a missing test somewhere.
If there are no languages installed the create 
setup page should simply show no languages!

Can't create dojo though. 
Think that is because one-self is not connecting.
Still on Host-only adpater. Not good.

$ cd /var/www/cyber-dojo/test/lib
$ sudo cp OneSelfDummy.rb ../../lib
$ cd /var/www/cyber-dojo/lib
$ sudo chown www-data OneSelfDummy.rb
$ sudo chgrp www-data OneSelfDummy.rb
and edit all.rb so it names OneSelfDummy.rb

And we are up. It was OneSelf.
I can now do a dojo in C/assert.


Summary
=======
o) build script should be a single script?
   instead of cloning first perhaps
   wget the script and then run it.
   
o) build script works when building from Ubuntu 14.04.2 server
   as long as you install docker first.
   $ sudo wget -qO- https://get.docker.com/ | sh   
   Perhaps I could add that command anyway.
   Is it a no-op if docker is already installed?   

o) OneSelfDummy.rb needs to be moved into lib

o) When running on a local laptop with no internet connectivity
   (Host-only-adapter) OneSelf not being visible means you
   can't do local dojos. FIX THIS.
   
o) Add test for LanguagesDisplayNameSplitter when there are no languages.

o) Create new cyber-dojo blog page on setting up a server
   from the 14.04.2 Linux Server image.


VirtualBox Note
===============
To get the git-server and the cyber-dojo server both
running with host-only-adapter and not have the same IP
address I had to tweak one of them so its apparent mac address
was different to the other one. I cloned one server from the other.


Notes
=====
www-data having to scp the bare git repo to the git server?
www-data doing this does not feel right.
www-data does not have a login shell.
Thinking I should create a cyber-dojo user on the server
and get apache2 to run the cyber-dojo rails app as the
cyber-dojo user rather than the www-data user.
Then give cyber-dojo its own home folder.
Which could be /var/www/cyber-dojo !?
Can I do this?
setup_digital_ocean_server.sh has these lines
  echo PassengerDefaultUser www-data >> /etc/apache2/mods-available/passenger.conf
  echo PassengerDefaultGroup www-data >> /etc/apache2/mods-available/passenger.conf
which suggests I can.
But... this will affect some of the language containers.
Eg C# which assumes the www-data user
Yes. See C#/NUnit/Dockerfile


Using www-data as a first try to see if it works even
though www-data has no login shell etc.

$ cd /var/www
$ sudo mkdir .ssh

temporarily set access to .ssh
$ sudo chmod 777 .ssh
$ sudo chown www-data .ssh
$ sudo chgrp www-data .ssh

now make ssh keys
$ ssh-keygen -t rsa
This copies them to /root
$ pwd
/var/www/.ssh
$ sudo mv /root/.ssh/id_rsa .
$ sudo mv /root/.ssh/id_rsa.pub .
$ sudo rm -rf /root/.ssh

Now scp them to git server
$ pwd
/var/www/.ssh
$ scp id_rsa.pub git@192.168.59.103:/home/git/.ssh/id_rsa.pub.www-data
Could have used ssh-copy-id

Should add this to apache2 config
<Directory /var/www/.ssh>
  Order Deny,Allow
  Deny from all
</Directory>


On the git server
$ pwd
/home/git/.ssh
$ cat id_rsa.pub.www-data >> authorized_keys

then set permissions back on cyber-dojo server
$ cd /var/www
$ sudo chmod 600 .ssh

Ok. Now I need to test it. How?
Can I su as www-data?
$ su - www-data -c 'pwd'
It asks for a password.
Is this something to do with sudoers?

Or do I have to set the server to use DockerGitCloneRunner
and make a command that tests the ssh. eg
as jon
$ ssh git@192.168.59.103 "mkdir -p "/home/git/a/b/c "
This asked for git password.
ssh fouled up on git server?

Works from macbook pro terminal.
This is the wrong approach.
Don't want to muck up the www-data user.
Need to use new user cyber-dojo.
That way I can set the cyber-dojo user to have or not have a password
(eg for testing)

sudo adduser cyber-dojo
s/www-data/cyber-dojo/  in /etc/apache2/mods-available/passenger.conf
cd /var/www
sudo chown -R cyber-dojo cyber-dojo
sudo chgrp -R cyber-dojo cyber-dojo

And cyber-dojo server starts and opens create/setup page.
Creating a dojo fails though.

cyber-dojo/config/application.rb needs to use OneSelfDummy

Can now create a dojo.
editing cyber-dojo sh file to do
$ whoami
says
$ www-data
Is this because of the docker run command?
Yes. DockerVolumeMountRunner.rb has this
    docker_command = "docker run -u www-data" + ...
So edited that s/www-data/cyber-dojo/
Ok. Now I get error

Error response from daemon: Cannot start 
container 5257a15351a3bf122180d4fa4a5bc021a838cb8e3cdb2734f8233cfea23f8b64:
[8] System error: Unable to find user cyber-dojo

Googling reveals this
https://github.com/docker/docker/issues/12514

This says the user has to exist *inside* the docker container.
Of course.
And of course means that the docker container
needs network access to the git server.

So I will need to have a cyber-dojo user *inside*
the docker containers and use that for the docker-run command.

And I will need to recreate all the docker containers to use
USER cyber-dojo

Don't think this will be too bad.
Eg C/assert will need to append this to its Dockerfile

RUN adduser cyber-dojo --gecos "First Last,Room,WorkPhone,HomePhone" --disabled-password

and the documentation [man adduser] suggests that
disabled-password will not allow password login but
will allow access via ssh rsa keys. Ok.

Ok. whoami in cyber-dojo.sh says cyber-dojo.
Now need to make sure files saved in katas/
folder are owned by cyber-dojo user.

No --disabled-password is not what I need. I need no password.

RUN sudo adduser cyber-dojo -uid 1002 
RUN sudo passwd -d cyber-dojo

And now
$ sudo - cyber-dojo -c 'pwd'
/home/cyber-dojo 
Works without needing a password.

Next thing. Inside the container 
$ cat /etc/passwd
cyber-dojo:x:1000:1000
But in the cyber-dojo server
$ cat /etc/passwd
cyber-dojo:x:1002:1002

whereas www-data is 33 in both.
I think they need to be the same.

Add this to Dockerfile

RUN sudo adduser cyber-dojo -uid 1002
RUN sudo passwd -d cyber-dojo

And now docker -i -t verifies that cyber-dojo inside the container has a uid of 1002

But, oddly, from cyber-dojo.sh 
cat /etc/passwd
Says the gid of cyber-dojo is back to 1000

Looking at...
http://www.yegor256.com/2014/08/29/docker-non-root.html

#!/bin/bash
adduser --disabled-password --gecos '' r
adduser r sudo
echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
su -m r -c /home/r/script.sh

Ok. Woke up this morning realizing that the rails server 
needs to push to the git server. So *it* needs ssh.
But the docker container only ever clones/pulls from
the git server. So the docker container does not need
ssh. 

I think my scp is failing because when I do
ssh-keygen I'm logged in as jon and so the id_rsa
file does not go into www-data's home dir.
So when asked I specified /var/www/.ssh

$ pwd
/var/www/.ssh
$ ssh-copy-id -i ./id_rsa git@192.168.59.103 

manually verified id_rsa file is on the git server.

Still not working.
Looking at id_rsa.pub file I see jon@server at the end.
Needs to be www-data. Is there an option to specify
the user in ssh-keygen?
No. man ssh-keygen says the user@host is a comment.

Ok. Think www-data needs a valid login shell.
Think I've had this before.
Going round in circles?

$ usermod -s /bin/bash www-data

Still no joy.
hostname is same on both machines.
Does that matter?
Changed it.
Still failing.

Added -v option to ssh/scp command.
says read_passphrase: can't open /dev/tty
Progress...
This looks like it. Says www-data does not have a tty
http://serverfault.com/questions/372211/cant-ssh-as-tty-less-user

No. Seems the tty is a red herring.
It's a ssh key issue.
Maybe give www-data a password.
Then log in as www-data and ssh-keygen
Then set www-data back to no password.


========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================
========================================================


Or maybe create a cyber-dojo user and use that just
to push/scp to the git server.
http://askubuntu.com/questions/402832/how-do-i-allow-only-one-user-to-su-to-another-account


>>>>>
>>>>>Added this line to /etc/sudoers.d/custom  (new file)
>>>>>to allow www-data to sudo -u cyber-dojo
www-data ALL=(cyber-dojo:cyber-dojo) NOPASSWD:ALL

which should allow www-data to do this...
$ sudo -u cyber-dojo bash

It looks like the command (bash) can be entered just as is unquoted.
But if there are cd and redirections then a subshell is needed
$ sudo -u cyber-dojo -c "cd blah ; cat abc > Hello.txt"

>>>>>
>>>>>Logged in as cyber-dojo, entered password, setup ssh from cyber-dojo to git server
>>>>>
$ cd ~/.ssh
$ ssh-keygen -t rsa
$ ssh-copy-id git@192.168.59.103
entered git password
$ ssh git@192.168.59.103
and verified its ok.

Yes. started(avatar) is now working :-)  Just these left...
pre_test(avatar)
post_test(avatar)
run(...)


pre_test(avatar)
 Trying from command line
 $ cd katas/02/3456EDED/deer
 $ sudo -u cyber-dojo git commit -a -m 'pre-pull' --quiet
 Fails with
 .../deer/.git/index.lock permission denied.
 
Think I need to create a group and make both www-data and cyber-dojo
members of the group so cyber-dojo can read/write files.

>>>>>>
>>>>>>Added cyber-dojo to www-data's group
>>>>>>
$ sudo usermod -a -G www-data cyber-dojo

Ok. Now I can create a new dojo
Enter it
Make a change
Hit test

And the change is visible on the git server.
Although 
$ git diff HEAD HEAD^1
shows
- and + lines that are the same except for ^M
Eg
-int answer(void)
+int answer(void)^M

Which is not right.
Excellent.

Trying docker run command directly from terminal
$ cd katas/F9/BD34609D/moose
$ sudo docker run 
    -u www-data
    --cidfile='cidfile.txt'
    -w /sandbox
    cyberdojo/gcc-4.8.1_assert
    /bin/bash -c 
       'git clone git@192.168.59.103:/opt/git/F9/BD34609D/moose.git;
        cd moose;
        ./cyber-dojo.sh'
        
        
And it responds with
fatal: could not create work tree dir 'moose'.: Permission denied

That makes sense.
Need to have an area where I can actually create files.

Ok. Tried it interactively...

$docker run
    -u www-data
    --cidfile='cidfile.txt'
    -it
    cyberdojo/gcc-4.8.1_assert
    /bin/bash 

www-data@5e6d74: cd /tmp
www-data@5e6d74: git clone git@192.168.59.103:/opt/git/F9/BD34609D/moose.git
This says 'are you sure you want to continue'
I say yes
Then asks for git user password
Clone then works. Then 

www-data@5e6d74: cd moose
www-data@5e6d74: cd sandbox
www-data@5e6d74: ./cyber-dojo.sh
All tests passed

So cloning requires ssh access. 

Want to avoid that.
Use git daemon on git server
https://git-scm.com/book/en/v1/Git-on-the-Server-Git-Daemon

Think this is out of date
file is called local-git-daemon.conf
and it lives in /etc/init.d/
Checked with
$ sudo init-checkconf -d /etc/init.d/local-git-daemon.conf


To specify the git daemon can serve each .git repo I need to
$ cd opt/git/F9/BD34609D/moose.git
$ touch git-daemon-export-ok

Need to open port 9418
$ sudo ufw allow 9418
$ sudo ufw enable

$ sudo apt-get install git-daemon-run

Getting closer now. From cyber-dojo server
$ git clone git://192.168.59.103/opt/git/F9/BD34609D/moose.git
And it says
Cloing into 'moose'...
fatal: remote error: access denied or repository not exported 
   /opt/git/F9/BD34609D/moose.git

Is this a file/folder rights issue?

After apt-get install git-daemon-run
cat /etc/passwd
has a new user gitdaemon
No that's not it.
cd /var/log/gitdaemon
tail -100 current
/var/lib/opt/git/F9/BD34609D/moose.git does not appear to be a git repo

Where is the /var/lib coming from...?


>>>>>>Added gitdaemon to git's group
>>>>>>
$ sudo usermod -a -G git gitdaemon


This helped.
ftp://www.kernel.org/pub/software/scm/git/docs/git-daemon.html

Removed /etc/init.d/local-git-daemon.conf

Edited
/etc/service/git-damon/run 
#!/bin/sh
exec 2>&1
echo 'git-daemon starting'
exec chpst -ugitdaemon \
   "$(git --exec-path)"/git-daemon \
   --reuseaddr --base-path=/opt/git /opt/git


AND YEEEES. git clone works.
$ git clone git://192.168.59.103/F9/BD34609D/moose.git


Ok. But now the ssh does not work. Adding -v reveals port 22
does not appear to be open.

$ sudo ufw allow 22
$ sudo ufw enable

Ok. Now ssh from command line works.

Ok. Can now enter. And repo is created on git server.
Hitting test for first time with docker run.
Nothing comes back.
Checking the rails log.
Undefined local variable cidfile.
Yup. Missing. language local variable too.
Added those.
Now it says quoted method is undefined.
Various other typos.

And YEEEES. I'm running a command inside the container
and getting the response.
First response is
fatal: repository 'git@192.168.59.103/opt/git/BF/26F665FE/deer.git' does not exist

Adding -v option to the git clone.
No help.
Run the container interactively.
$ docker run -u www-data -it cyberdojo/gcc-4.8.1_assert /bin/bash
$ ping 192.168.59.103
fine
$ git clone git@192.168.59.103/opt/git/BF/26F665FE/deer.git
fatal: repostitory does not exist.
Try from cyber-dojo server. Same.
Does git user have to be logged in?
Did opening port 22 close 9418?
No. Log in as jon
$ sudo ufw status
9418 and 22 are listed as ALLOW Anywhere.
git@... is not right. should be be git:...
Fixed that.
And yes. Now it fails with
fatal: could not create work tree dir 'koala'.: Permission denied
which is correct because www-data has no rights at / inside
the container.


Now the git clone is failing?!
$ tail -100 /var/log/git-daemon/current
Ah. It's because /opt/git is the base I need to change
$ git clone git://192.168.59.103/opt/git/F9/BD34609D/moose.git
to
$ git clone git://192.168.59.103/F9/BD34609D/moose.git


Getting near now. Now the problem is that cd is
a built-in command and you can't give a built-in
to timeout.
$ info coreutils 'timeout invocation'

Hmmm. Doesn't seem to be a way around that.
How to work around it?
Echo the commands into a script and then run that?
It seems not. If the docker run command echoes into a file then
that file does not appear when I ls inside the container.

Ok. There is an option on git clone to specify
the folder you want to clone into.

But I don't think the git clone is working from inside
the docker container.
Nope its not.
I think the problem might be that I haven't opened a port.
9418 and 22
docker run  -p 9418:9418 
did not help

Trying with --net=host
option which is not secure

And YYYYEEESSS. First git-cloning docker-container not using
volume mounting is working. Woohoo.

Next step to remove --net=host
Try running git clone in interactive client with debugging
switched on. See this document...
https://confluence.atlassian.com/display/STASH/Stash+debug+logging#Stashdebuglogging-DebugloggingforGitoperationsontheclient


========================================================
========================================================
========================================================

One potential issue with having a password-less, ssh-less git-server
giving git clone read-access is that it could become the bottleneck
instead of the docker container...




