

PORTS
------
Turn off all ports. Already happens.


USER
----
DockerTestRunner.rb now does -u www-data rather than -u root.


TIMING
------
The timeout command runs *inside* the docker
container. This presents a potential security flaw
since from inside the container the timeout could
perhaps be disabled. However, if the timeout
happens on the outside then the docker-run command
is not terminated cleanly (when there is an infinite loop)
and still-running docker containers remain.


CPU
---
Limit cpu option - want to do this so server's core
processes have priority in the face of an attack.


DISK
----
You can use tempFS as a proxy to an existing real
file system and this allows you to limit the amount
of disk space available.
https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/
By default you get 10GB of space for each container
To change it
docker -d --storage-opt dm.basesize=5G
docker -d --storage-opt dm.basesize=5M
Then you need to restart the docker daemon
Tried this on DockerTestRunner - did not work.
Ok.
$ service docker stop
$ docker -d --storage-opt dm.basesize=5M &
This creates a lot of output.
But it works and stays running after you exit the server you
ssh'd into.


RAM
---
Limit RAM option (and swap)
https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/
-m 128M
Says
digital-ocean server says
WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.
AWS server gives same warning.


//-------------------------------------

There is no valuable data on the file system.
But someone could escalate and then control the
server from which to launch attacks. I could then
be liable in some way.

Make a docker container for the whole server!
Only really makes sense if the outer container
can run containers inside itself. Rob mentioned
that it can.
