
-----------
Plan
-----------
1. revert auto-builds back to non-auto-builds. DONE
   don't worry about making URL link
2. restructure languages/folders DONE
   NB. language folder must not have - character in it
   Once language folder has its own manifest that
   can set the display_name of the language and the
   test-sub-folder's manifest can set the display of
   the test-name.
   
   
3. Give each language folder its own manifest to control
   its display name.
3. 
   ?Split off new domain class, Language -> Test
   ?create kata from (exercise,test) pair
   ?Can always get back to language from test.

3. simplify setup page to use new languages/ structure


Then think about versioning, auto-builds, dojo-time-limits.
Ideally they are separate issues.


Starting to think that the version number 
of each language should be part of its folder name.
That way I could have automated builds from the cyberdojo index.
And display names could *choose* whether to show version or nor.
That's the key point - to make the display name non-dependent.
Whatever the display-name of a language, a dojo's manifest.json
file has 'language':folder-name
Making the dojos have a time-limit of 1 day is a key decision.
It means I don't have to worry about resuming old dojos.
I only need to make sure forking works.

There's another key point.
What about when there are 2+ versions of a language?
Do I want to show both of them?
If I do they have to have different display names.
Remember what is displayed is based on what folders exist
that have their docker container installed.



--------------
Not Auto-build (but were)
--------------
Y cyberdojo/nasm-2.10  
Y cyberdojo/nasm-2.10.0_assert   
Y cyberdojo/bcpl
Y cyberdojo/bcpl-all_tests_passed
Y cyberdojo/fsharp-3.0
Y cyberdojo/fsharp-3.0_nunit
Y cyberdojo/csharp-2.10.8.1
Y cyberdojo/csharp-2.10.8.1_nunit
Y cyberdojo/build-essential
Y cyberdojo/gcc-4.8.1
Y cyberdojo/gcc-4.8.1_assert
Y cyberdojo/gcc-4.8.1_cpputest
Y cyberdojo/gpp-4.9
Y cyberdojo/gpp-4.8.1
Y cyberdojo/gpp-4.8.1_assert
Y cyberdojo/gpp-4.8.1_cpputest
Y cyberdojo/gpp-4.8.1_googletest
Y cyberdojo/gpp-4.8.1_boosttest
Y cyberdojo/gpp-4.9_googlemock
--------------
Not Auto-build 
--------------
N cyberdojo/clojure-1.4.0
N cyberdojo/clojure-1.4.0_test
N cyberdojo/coffeescript-1.14.3
N cyberdojo/coffeescript-1.14.3_jasmine
N cyberdojo/csharp-2.10.8.1_specflow
N cyberdojo/d-4.8.1
N cyberdojo/d-4.8.1_unittest
N cyberdojo/erlang-5.10.2
N cyberdojo/erlang-5.10.2_eunit
N cyberdojo/fortran-4.8
N cyberdojo/fortran-4.8_funit
N cyberdojo/gcc-4.8.1_unity
N cyberdojo/go-1.1.2
N cyberdojo/go-1.1.2_testing
N cyberdojo/gpp-4.8.1_catch
N cyberdojo/gpp-4.8.1_igloo
N cyberdojo/groovy-2.2.0
N cyberdojo/groovy-2.2.0_junit
N cyberdojo/groovy-2.2.0_spock
N cyberdojo/haskell-7.6.3
N cyberdojo/haskell-7.6.3_hunit
N cyberdojo/java-1.8
N cyberdojo/java-1.8_approval
N cyberdojo/java-1.8_cucumber
N cyberdojo/java-1.8_jmock
N cyberdojo/java-1.8_junit
N cyberdojo/java-1.8_mockito
N cyberdojo/java-1.8_powermockito
N cyberdojo/javascript-0.10.15
N cyberdojo/javascript-0.10.15_assert
N cyberdojo/javascript-0.10.15_jasmine
N cyberdojo/javascript-mocha
N cyberdojo/perl-5.14.2
N cyberdojo/perl-5.14.2_test_simple
N cyberdojo/php-5.5.3
N cyberdojo/php-5.5.3_phpunit
N cyberdojo/python-3.3.5
N cyberdojo/python-3.3.5_pytest
N cyberdojo/python-3.3.5_unittest
N cyberdojo/r-3.0.1
N cyberdojo/r-3.0.1_runit
N cyberdojo/ruby-1.9.3
N cyberdojo/ruby-1.9.3_approval
N cyberdojo/ruby-1.9.3_cucumber
N cyberdojo/ruby-1.9.3_rspec
N cyberdojo/ruby-1.9.3_test_unit
N cyberdojo/ruby-2.1.3
N cyberdojo/ruby-2.1.3_mini_test
N cyberdojo/scala-2.9.2
N cyberdojo/scala-2.9.2_scalatest


- - - - - - - - - - - - - - - - - - - -
sym-linking...
- - - - - - - - - - - - - - - - - - - -
Renaming/restructuring the language folders.
One effect of this will be that existing
dojos for languages that have sym-linked 
support files will no longer be resumable.
Or rather, they will be re-enterable, and
you will be able to fork, but you will 
not be able to [test]
This suggests that dojos should have a
max duration. Say one day.
- - - - - - - - - - - - - - - - - - - -



- - - - - - - - - - - - - - - - - - - -
Nesting Structure
- - - - - - - - - - - - - - - - - - - -
Perhaps it would be simpler to nest the test-frameworks
underneath the languages. Viz instead of 
dojo.languages[language_name + '-' + test_name]
do
dojo.languages[language_name].tests[test_name]
s/tests/testing/



- - - - - - - - - - - - - - - - - - - -
What needs to be refactored?
- - - - - - - - - - - - - - - - - - - -
eg...
  C-assert
  C-CppUTest
  C-Unity
  
becomes...
  C/assert
  C/CppUTest
  C/Unity
  

- - - - - - - - - - - - - - - - - - - -
Languages.rb
- - - - - - - - - - - - - - - - - - - -

  def initialize(path,name)
    @path,@name = path,name
  end

  attr_reader :name

  def [](name)
    make_language(latest(name))
  end

  def path
    @path + name + '/'
  end

private

  def make_cache
    cache = [ ]
    dir.each_dir do |sub_dir|
      language = make_language(sub_dir)
      cache << language if language.exists? && language.runnable?
    end
    cache
  end

  def make_language(name)
    Language.new(path,name)
  end

...becomes...

  def initialize(root_path,language_name,test_name)
    @root_path,@language_name,@test_name = root_path,language_name,test_name
  end

  def name
    @language_name + '-' + @test_name
  end

  def [](language_name,test_name)
    make_language(latest(language_name,test_name))
  end

  def path
    @root_path + @language_name + '/' + @test_name + '/'
  end

private

  def latest(language_name,test_name)
    will need reworking
    how do I return two arguments?
    do I need a splat somewhere?
  end

  def make_cache
    cache = [ ]
    dir.each_dir do |language_name|
      disk[path + language_name].each_dir do |test_name|
        language = make_language(language_name,test_name)
        cache << language if language.exists? && language.runnable?
      end
    end
    cache
  end

  def make_language(language_name,test_name)
    Language.new(path,language_name,test_name)
  end


- - - - - - - - - - - - - - - - - - - -
Kata.rb 
- - - - - - - - - - - - - - - - - - - -

  def language
    dojo.languages[manifest_property]
  end

..becomes...

  def language
    dojo.languages[language_name,test_name]
  end
  
private

  def language_name
    manifest['language'].split(',')[0]
  end
  
  def test_name
    manifest['language'].split(',')[1]
  end
  
  
- - - - - - - - - - - - - - - - - - - -
setup_controller.rb 
- - - - - - - - - - - - - - - - - - - -

  def save
    language = dojo.languages[params['language'] + '-' + params['test']]
    ...
  end
  
...becomes...

  def save
    language = dojo.languages[params['language'], params['test']]
    ...
  end

...or maybe...

  def save
    language = dojo.languages[params[:language], params[:test]]
    ...
  end




