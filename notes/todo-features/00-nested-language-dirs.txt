
Auto-Build?
-----------
Y cyberdojo/build-essential

Y cyberdojo/bcpl
Y cyberdojo/bcpl-all_tests_passed

N cyberdojo/clojure-1.4.0
N cyberdojo/clojure-1.4.0_test

N cyberdojo/coffeescript-1.14.3
N cyberdojo/coffeescript-1.14.3_jasmine

Y cyberdojo/csharp-2.10.8.1
Y cyberdojo/csharp-2.10.8.1_nunit
N cyberdojo/csharp-2.10.8.1_specflow

N cyberdojo/d-4.8.1
N cyberdojo/d-4.8.1_unittest

N cyberdojo/erlang-5.10.2
N cyberdojo/erlang-5.10.2_eunit

N cyberdojo/fortran-4.8
N cyberdojo/fortran-4.8_funit

Y cyberdojo/fsharp-3.0
Y cyberdojo/fsharp-3.0_nunit

Y cyberdojo/gcc-4.8.1
Y cyberdojo/gcc-4.8.1_assert
Y cyberdojo/gcc-4.8.1_cpputest
N cyberdojo/gcc-4.8.1_unity

N cyberdojo/go-1.1.2
N cyberdojo/go-1.1.2_testing

Y cyberdojo/gpp-4.9
Y cyberdojo/gpp-4.8.1
Y cyberdojo/gpp-4.8.1_assert
Y cyberdojo/gpp-4.8.1_boosttest
N cyberdojo/gpp-4.8.1_catch
Y cyberdojo/gpp-4.8.1_cpputest
Y cyberdojo/gpp-4.8.1_googletest
N cyberdojo/gpp-4.8.1_igloo
Y cyberdojo/gpp-4.9_googlemock

N cyberdojo/groovy-2.2.0
N cyberdojo/groovy-2.2.0_junit
N cyberdojo/groovy-2.2.0_spock

N cyberdojo/haskell-7.6.3
N cyberdojo/haskell-7.6.3_hunit

N cyberdojo/java-1.8
N cyberdojo/java-1.8_approval
N cyberdojo/java-1.8_cucumber
N cyberdojo/java-1.8_jmock
N cyberdojo/java-1.8_junit
N cyberdojo/java-1.8_mockito
N cyberdojo/java-1.8_powermockito

N cyberdojo/javascript-0.10.15
N cyberdojo/javascript-0.10.15_assert
N cyberdojo/javascript-0.10.15_jasmine
N cyberdojo/javascript-mocha

Y cyberdojo/nasm-2.10
Y cyberdojo/nasm-2.10.0_assert

N cyberdojo/perl-5.14.2
N cyberdojo/perl-5.14.2_test_simple

N cyberdojo/php-5.5.3
N cyberdojo/php-5.5.3_phpunit

N cyberdojo/python-3.3.5
N cyberdojo/python-3.3.5_pytest
N cyberdojo/python-3.3.5_unittest

N cyberdojo/r-3.0.1
N cyberdojo/r-3.0.1_runit

N cyberdojo/ruby-1.9.3
N cyberdojo/ruby-1.9.3_approval
N cyberdojo/ruby-1.9.3_cucumber
N cyberdojo/ruby-1.9.3_rspec
N cyberdojo/ruby-1.9.3_test_unit
N cyberdojo/ruby-2.1.3
N cyberdojo/ruby-2.1.3_mini_test

N cyberdojo/scala-2.9.2
N cyberdojo/scala-2.9.2_scalatest


- - - - - - - - - - - - - - - - - - - -
Renaming/restructuring the language folders.
One effect of these will be that existing
dojos for languages that have sym-linked 
support files will no longer be resumable.
Or rather, they will be re-enterable, and
you will be able to fork, but you will 
not be able to [test]
This suggests that the docker container 
should contain all the files it needs
and that support filenames should be 
dropped from the Languages' manifest.
It might be possible to make them still
work by including the now failing 
sym-linked files inside a new Docker container.

- - - - - - - - - - - - - - - - - - - -


Perhaps it would be simpler to nest the test-frameworks
underneath the languages. Viz instead of 
dojo.languages[language_name + '-' + test_name]
do
dojo.languages[language_name].tests[test_name]



- - - - - - - - - - - - - - - - - - - -
What needs to be refactored?
- - - - - - - - - - - - - - - - - - - -

eg...
  C-assert
  C-CppUTest
  C-Unity
  
becomes...
  C/assert
  C/CppUTest
  C/Unity
  
- - - - - - - - - - - - - - - - - - - -
Languages.rb
- - - - - - - - - - - - - - - - - - - -

  def initialize(path,name)
    @path,@name = path,name
  end

  attr_reader :name

  def [](name)
    make_language(latest(name))
  end

  def path
    @path + name + '/'
  end

private

  def make_cache
    cache = [ ]
    dir.each_dir do |sub_dir|
      language = make_language(sub_dir)
      cache << language if language.exists? && language.runnable?
    end
    cache
  end

  def make_language(name)
    Language.new(path,name)
  end

...becomes...

  def initialize(root_path,language_name,test_name)
    @root_path,@language_name,@test_name = root_path,language_name,test_name
  end

  def name
    @language_name + '-' + @test_name
  end

  def [](language_name,test_name)
    make_language(latest(language_name,test_name))
  end

  def path
    @root_path + @language_name + '/' + @test_name + '/'
  end

private

  # s/latest/renamed/
  
  def latest(language_name,test_name)
    will need reworking
    how do I return two arguments?
    do I need a splat somewhere?
  end

  def make_cache
    cache = [ ]
    dir.each_dir do |language_name|
      disk[path + language_name].each_dir do |test_name|
        language = make_language(language_name,test_name)
        cache << language if language.exists? && language.runnable?
      end
    end
    cache
  end

  def make_language(language_name,test_name)
    Language.new(path,language_name,test_name)
  end


- - - - - - - - - - - - - - - - - - - -
Kata.rb 
- - - - - - - - - - - - - - - - - - - -

  def language
    dojo.languages[manifest_property]
  end

..becomes...

  def language
    dojo.languages[language_name,test_name]
  end
  
private

  def language_name
    manifest['language'].split(',')[0]
  end
  
  def test_name
    manifest['language'].split(',')[1]
  end
  
  
- - - - - - - - - - - - - - - - - - - -
setup_controller.rb 
- - - - - - - - - - - - - - - - - - - -

  def save
    language = dojo.languages[params['language'] + '-' + params['test']]
    ...
  end
  
...becomes...

  def save
    language = dojo.languages[params['language'], params['test']]
    ...
  end

...or maybe...

  def save
    language = dojo.languages[params[:language], params[:test]]
    ...
  end




