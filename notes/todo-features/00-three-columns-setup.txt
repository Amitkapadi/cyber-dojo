
Split create page's two columns into three columns.
language? tests? exercise?

When language with only one test framework is selected
then the tests? column has only that entry.

How to code the tests? column?
One way would be to mirror the way files are done on the test page.
Viz, each tests column has pre-created html and when you select
a language the tests column for the current language is hidden
and the tests column for the selected language is displayed.

Only real requirement is that initial display defaults to
same language,tests,exercise selection as the previous dojo's
ID (if there was a previous dojo).

- - - - - - - - - - - - - - - - - - - - - - - - - -
How does it work now?

      @languages = dojo.languages.each.select{ |language|
        language.runnable?
      }.map{ |language|
        [language.display_name,language.name]
      }.sort
      @languages_names = @languages.map{|array| array[1]}

so @languages is an array whose entries are [display_name,name]
where name is the languages' folder
and @languages_names is an array whose entries are [display_name]
@language_names is used only as an argument to chooser (and is
not used in the view) as follows:

      @selected_language_index = choose_language(@languages_names, id, dojo.katas)


The view uses the .erb

<div id="languages-container">
  <% @languages.each_with_index do |atts,index| %>
    <div class="filename"
         id="language_<%= index %>"
         data-language="<%= atts[1] %>">
      <%= atts[0] %>
    </div>
  <% end %>
</div>


eg @languages = [["C, Unity", "C-Unity"],["Go, testing", "Go-testing"]]
will create

<div id="languages-container">  
    <div class="filename"
         id="language_0"
         data-language="C-Unity">
      C, Unity
    </div>	
    <div class="filename"
         id="language_1"
         data-language="Go-testing">
      Go, testing
    </div>
</div>

id="language_2" 
is needed so the initially selected language can be the one from the previous kata. 


How does save work?
-------------------
The controller has this...

    language = dojo.languages[params['language']]
    exercise = dojo.exercises[params['exercise']]
	
And the [ok] button handler has this...

  $('#ok').click(function() {
    var exercise = $('[id^=exercise_][class~=selected]').data('exercise');
    var language = $('[id^=language_][class~=selected]').data('language');
    $.getJSON('/setup/save', {
      exercise: exercise,
      language: language
    }, function(dojo) {
      var url = '/dojo/index/' + dojo.id;
      window.location = url;
    });
  });

So it will be easy to extend that to 
    var test = $('[id^=test_][class~=selected]').data('test');


The language? column will shrink and contain only one entry per language.
For example
  C++, Boost.Test
  C++, CppUTest
  C++, GoogleMock
  C++, GoogleTest
  C++, Igloo
  C++, assert
  C++, catch
Will become
  C++


Hmmmm. How about putting *all* the test names into a test column
each with their own index, but when a language is selected I use
javascript to display:none all test entries
and then showing only those ones matching the selected language.
I like this approach because it simplifies the initial selection 
of the language and test which will become two initial selections.

Aside: I don't think I check that languages display_names are unique.
If two languages had the same display_name it would create confusion.
 
Using this approach I will need to keep a master list of
display_names and use javascript to filter this splitting on the comma.

Only fiddly bit is when you switch from one language to another and
then back to the first language is the test selection 'sticky'?
Viz does the page automatically keep the test selection per language
in the same way the textareas keep the cursor position for each visible 
file.
One way to do this would be to store the test selection with each
language in a data-test attribute. The selected language would
have its data-test attribute value initially set to match the 
current, one-name language+test. And when a language is selected
the currently selected test's index is set into the languages' data-test
attribute, and then the new language is displayed, and its test
selection made.

So currently
@languages is an array of [display_name,name]
where name is the languages folder, and has a dash in it, in the form
language-test
eg C-Unit
eg Go-testing

New version will start from plain array of display_names
eg 
  @languages_display_names = ["C-Unity","C-assert","C-CppUTest","Go-testing"]
  
and from this I will need to create three arrays, one for languages, 
and one for tests, and one for initial indexes.
eg
  @languages_names = ["C","Go"]
  @test_names = ["Unity","assert","CppUTest","testing"]
  @test_indexes = [1,3]
  
which means the starting index for language "C" is 1 which is "assert"
and the starting index for language "Go" is 3 which is "testing".

So html for languages will initially look like this

<div id="languages-container">  
    <div class="filename"
         id="language_0"
		 data-language="C"
         data-test-index="1">
      C
    </div>	
    <div class="filename"
         id="language_1"
		 data-language="Go"
         data-test-index="3">
      Go
    </div>
</div>

And html for tests will initially look like this

<div id="tests-container">
  <div class="filename"
       id="test_0"
	   data-test="Unity"
	   style="display:none">
	 Unity
  </div>
  <div class="filename"
       id="test_1"
	   data-test="assert"
	   style="display:none">
	 assert
  </div>
  <div class="filename"
       id="test_2"
	   data-test="CppUTest"
	   style="display:none">
	 CppUTest
  </div>
  <div class="filename"
       id="test_3"
	   data-test="testing"
	   style="display:none">
	 testing
  </div>
</div>


@languages_display_names = ["C-Unity","C-assert","C-CppUTest","Go-testing"]
  
When language (eg "C") is selected then
o) current test index selection is saved into current languages data-test-index attribute
o) all tests are set to display:none
o) process each entry in @languages_display_names, keeping track of its index
   if entry starts with "C-" then set its style to display:block
   The - is important since I don't want to match C++ which also starts with a C

The [ok] button handler, 

  $('#ok').click(function() {
    var language = $('[id^=language_][class~=selected]').data('language');
	var test     = $('[id^=test_    ][class~=selected]').data('test');
    var exercise = $('[id^=exercise_][class~=selected]').data('exercise');
    $.getJSON('/setup/save', {
      language: language,
	  test: test,
      exercise: exercise
    }, function(dojo) {
      var url = '/dojo/index/' + dojo.id;
      window.location = url;
    });
  });

And the controller will need to

    language = dojo.languages[params['language'] + '-' + params['test']]
    exercise = dojo.exercises[params['exercise']]




