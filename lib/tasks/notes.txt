
How many dojos forked from this light?
--------------------------------------
get its visible-files content-hash
find dojos whose tag-zero content-hash matches
However, there are two further considerations...
1) Suppose I have reverted. A reverted traffic-light
   always has exactly the same content-hash as the
   light it reverted to. Thus both the new-reverted-to
   light and the older-reverted-from light will both
   get a fork-count increment.
   So I need to ignore a light if its content-hash
   already occurs in an earlier traffic-light.
2) Suppose I have several timeout amber traffic lights...
   It's possible (though unikely), to fork from (and
   revert to) an amber traffic-light. Again in this case
   there will be several amber traffic-lights (in a row)
   with the same content-hash. So again ignore a light
   if its content-hash already occurs in an earlier
   traffic light.

Mark reverted traffic-lights
----------------------------
Thus suggests it would be quite easy (and useful)
to display a revert traffic-light in a special way.


Database only storage on the hub?
--------------------------------
Suppose the database stores the manifest.json for each
traffic-light. This means I can completely get rid of
the katas/ folder on the hub.
I can recreate the history-dialog git-diff on the fly.
At worst I can create a temporary dir, store the
visible files from the first TL, commit and tag, store
the visible files from the second TL, commit and tag,
and then do a git-diff. There's almost certainly
a way to do it in memory too. I could use a ramdisk on
a tempfs if nothing else.

I could also store the result of this git-diff in a
new table (or maybe a new field in the Tag table).
This would auto-cache diff views of popular avatar-sessions,
and not taking up extra space for ones that a never viewed.

NB: Many times the content of a file in a new traffic
light does not change (eg instructions).
Storing these as-is is less efficient than storing
them once only (in a new table of file-contents).
This fits well since such a table would be indexed
on its content-hash which needs to be calculated anyway.

Note this approach suggests that I also don't need a
katas/ folder on the main cyber-dojo server either!
I only really need the disk for each [test] run where I have
to volume mount a dir to do a docker run. However,
I think it makes sense to stick with the disk approach
on the main server for two reasons
1) on the main server your going to be doing a
   history dialog diff review anyway. And only one.
2) it makes it super simple to zip the dojo for download
   and xfer to the hub.



tag-zero
--------
The idea of having no katas/ folder on the hub reinforces
the design that tag-0 needs to be stored
not in DojoStartPoint (as just a hash) but in TrafficLight
with its colour and visible-files.


Tag vs TrafficLight
-------------------
I think it is worth making the distinction. I would like
a model that works if/when I introduce micro-commits between
test events.


Suggested Schema
----------------

:Dojo
  has_many Avatars
    dojo_id string
    language string
    exercise string
    vote_count integer // == sum Avatars.vote_count

:Avatar
  belongs_to Dojo
  has_many Tags
    avatar string
    vote_count integer

:TagEvent
  belongs_to Avatar
  has_many VisibleFiles
  has_one? TrafficLight
    content_hash string  // == xor of all VisibleFiles.content_hash

:VisibleFile
  belongs_to TagEvent
  has_one VisibleFileContent
    filename string
    content_hash string  // == md5(VisibleFileContent.zipped.unzip)

:VisibleFileContent
    zipped string  // lossless compression

:TrafficLight
  belongs_to TagEvent
    colour string
    fork_count integer

