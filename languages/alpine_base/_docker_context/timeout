#!/bin/bash

# Alpine upgrade
# --------------
# The new architecture is docker-in-docker (dind). The web server
# now runs in a docker container based on Alpine-linux and the
# large Ubuntu based language images are being refactored to
# smaller Alpine based images.
#
#  1. I don't want to have to upgrade *all* the language
#     containers from Ubuntu to Alpine at the same time.
#  2. I'm supporting running the old Ubuntu language containers
#     from the new dind web server.
#  3. I'm *not* supporting running new Alpine language containers
#     from the old pre-dind web server.
#  4. I don't want two sets of images in the cyberdojofoundation
#     hub so the new language image names are unchanged.
#  5. cyber-dojo.sh files needs to work when run in
#     o) bash in Ubuntu based containers
#     o)   sh in Alpine based containers
#     Note that cyber-dojo.sh files don't use a shebang.
#
# This means the runner .sh inside the dind web server has to
# work, at least for a while, with old style Ubuntu containers
# and new style Alpine containers. This has two consequences:
#
# 1. Shell
# --------
# Alpine containers have sh not bash.
# Ubuntu containers have sh and bash.
# However, old style servers inner timeout (see below) uses
# bash so I have to install bash into Alpine.
#
# 2. Timeout
# ----------
# Alpine linux is based on TinyCore (not Ubuntu) and its
# timeout command has different syntax to Ubuntu. To support
# upgrade point 2 I need to make an Ubuntu style timeout call.
# This means I need an adapter inside the Alpine language
# containers which converts from Ubuntu timeout syntax to
# Alpine timeout syntax. That's this file.
# This adapter has to be called timeout (no .sh suffix) so it
# needs a #! shebang. I'm installing bash inside Alpine so its
# a bash shebang.
# I put this adapter into /usr/loca/bin/ which is in the path
# ahead of /usr/bin/ which is where the real timeout lives
# (which it calls).
#
# What are the differences?
#
#   Ubuntu: timeout --signal=SIG    SECS PROG ARGS
#   Alpine: timeout -s SIG       -t SECS PROG ARGS
#
# Lastly, in the docker runner .sh file there are *2* timeouts
#
# outer: timeout --signal=9    \ $1
#                15s           \ $2
#                docker        \ $3
#                run
#                ...
# inner:        /bin/sh -c "timeout --signal=9   \ $1
#                            10s                 \ $2
#                           ./cyber-dojo.sh"     \ $3
#
# The inner timeout needs a matching [sh -c] to avoid [Exec format error].
# It's important to use "$@" not "$*" or $@

SIGNAL=${1#*=}
SECONDS=${2%s}
shift
shift

if [ "$@" == "./cyber-dojo.sh" ]; then
  /usr/bin/timeout -s ${SIGNAL} -t ${SECONDS} bash -c "$@"
else
  /usr/bin/timeout -s ${SIGNAL} -t ${SECONDS} "$@"
fi


