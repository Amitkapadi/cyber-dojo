
MAJOR
-----
The design of cyber-dojo is very heavy on inodes. You will
almost certainly run out of inodes before running out of
disk space. I need a process that moves dojos that have
a minimum number of traffic lights and are at least 10 days
old (say) onto a separate server (or at the very minimum
into a separate folder on the same server. This ties in with
making old dojos diff sessions viewable as a stand-alone
html page (see vision.txt)
-----
Ensuring cyberdojo.sh cleans up any processes is messy. Instead of
trying to find children by walking pid/ppid hierarchy it would be
better to use pgid - process group. See lib/Files.rb
Note, if you're running under apache then this never seems to be
a problem - does apache auto clean processes?
-----
The Diff view doesn't work properly in IE8.
-----



MINOR
-----
make red/green diff-counts on diff-page into buttons that toggle red/green lines on-off
allow entry of only first 5 characters of ID as long as its unique to that length
dashboard/show URL does not contain the ID
add help button on diff page
add help button on dashboard page
add donate button to run-tests/dashboard/diff pages
if run-tests detects no change in files then don't create new traffic-light?
. . . . . . . 
$cd.alert() in cyberdojo-helpers.js can be refactored to use $cd.popupDialog()
upon start-coding the server could run cyber-dojo.sh and open the output file in the editor?
reclicking on diff'ed file doesn't seem to cycle correctly...
in firefox clicking on the ova hyperlink in the sources dialog doesn't start a download
is app/views/shared/_named.html.erb used anymore?
-----
html element IDs are sometimes created using filenames. When this
happens I currently do this...
   name.gsub('.', '_')            in GitDiff.rb and
   diff.name.replace(/\./g, '_')  in cyberdojo-build_diff_filenames.js
This should be handled more thoroughly to ensure resulting ID is valid.
ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed
by any number of letters, digits ([0-9]), hyphens ("-"), underscores ("_"),
colons (":"), and periods (".").
However jQuery has problems with ids that contain periods and colons.
-----
In lib/CodeOutputParser.rb...
if a player creates a cyberdojo.sh file which runs two or more
test files then it's possible that the output will contain the
strings denoting red and green traffic-lights. Because of this the
regex's should test for a red traffic-light first, and for
a green traffic-light second.
Also CodeOutputParser.rb with its function parse() should be
renamed based on what it does from the outside rather than
from the inside - namely it simply determines the traffic
light colour. Maybe something like
module TrafficLight
  def self.colour(unit_test_framework, output)
    ...
  end
end
-----
the various uses of eval in the code could do with being replaced with
a json parse.
-----
now that the ruby code is 1.9.3 it should be possible to get coverage
stats from the ruby tests.
-----
The intention with the installation tests is that they are used to determine
what languages are installed and to only offer those languages (at the create
page). But at the moment all the languages are being offered.
-----
The javascript tests need some TLC.
-----
The error handling at the front page is a bit messy. You get different
style popups if you enter a wrong ID compared to entering no ID.
And you also get different style popup for a wrong ID when you
click start-coding compared to resume-coding or review-coding.
There is a reason for this. It's because I want to make absolutely
sure that the new run-the-tests kata page is in a new tab/window.
It's important that there is never an operational back-button on
that page.
-----
