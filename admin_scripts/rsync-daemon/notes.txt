
Notes

0. Getting rsync-daemon to auto start when server boots up
   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=764616

1. Problem with using git-daemon to serve katas/ files to docker container is
   git-clone does not (easily) preserve file date-time-stamps.
   Also I don't need the .git folder I only need avatar/sandbox

2. When compute nodes are distributed, the create page will
   need reworking to determine what images are available.
   Can a docker-swarm solution do this?
   An ssh solution can!
   Simply run [ssh .... docker images] and collect the output

3. Thinking about round-tripping, could the rsync-daemon
   on the server accept an rsync call *back* to it from the
   docker-container? This would then allow a second git-commit
   on the main git repo, and new files could be fed back to the
   browser. Would allow Approval/Mutation style tests and as
   well as coverage files.

4. cyberdojofoundation/build-essential
   has rsync in it. Fortunate!
   
5. Digital-Ocean nodes built from Docker app are 1.8+
   and have full cgroup facilities for limiting eg memory :-)

6. http://linux.about.com/library/cmd/blcmdl5_rsyncd.conf.htm
   For rsync man/options


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Rough notes now below are now captured in 
  admin_scripts/rsync-daemon/etc_rsyncd.conf
  admin_scripts/rsync-daemon/etc_rsyncd.secrets
  admin_scripts/rsync-daemon/setup_rsync.sh
  lib/DockerRsyncRunner.rb
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



I'm looking into using rsync daemon instead.

From the man page
You can avoid the password prompt by setting the  environment variable 
RSYNC_PASSWORD to the password you want to use

Reading
http://www.jveweb.net/en/archives/2011/01/running-rsync-as-a-daemon.html

$ nano /etc/rsyncd.conf

lock file = /var/run/rsync.lock
log file = /var/log/rsyncd.log
pid file = /var/run/rsyncd.pid

[katas]
    path = /var/www/cyber-dojo/katas
    uid = www-data
    gid = www-data
    read only = yes
    list = false
    auth users = rsyncclient
    secrets file = /etc/rsyncd.secrets
    hosts allow = 172.17.0.0/255.255.255.0


(At first dropped last line [hosts allow = 192.168.1.0/255.255.255.0] to allow all access)

Now to create the secrets file
$ nano /etc/rsyncd.secrets

rsyncclient:password

$ chmod 600 /etc/rsyncd.secrets

$ rsync --daemon

To confirm it is working
$ cat /var/log/rsyncd.log

Enabled port 873 in Turnkey dashboard


$ ip route show | grep docker0 | awk '{print $9}'
172.17.42.1
$ docker run -it --rm --user=www-data -e RSYNC_PASSWORD='password' cyberdojofoundation/gcc-4.8.4_assert /bin/bash
www-data@e5fd79b041aa: rsync -rtW rsyncclient@172.17.42.1::katas/59/944533D0/buffalo/sandbox /tmp
www-data@e5fd79b041aa: cd /tmp/sandbox
www-data@e5fd79b041aa: ls -al
total 444
drwxr-xr-x 2 www-data www-data   4096 Sep 22 12:01 .
drwxr-xr-x 3 www-data www-data   4096 Sep 22 12:21 ..
-rw------- 1 www-data www-data 401408 Sep 21 21:42 core
-rwxr-xr-x 1 www-data www-data     25 Sep 22 12:01 cyber-dojo.sh
-rw-r--r-- 1 www-data www-data     59 Sep 22 11:52 hiker.c
-rw-r--r-- 1 www-data www-data    929 Sep 22 12:01 hiker.compiled_h
-rw-r--r-- 1 www-data www-data     73 Sep 21 21:42 hiker.h
-rw-r--r-- 1 www-data www-data    270 Sep 21 21:42 hiker.tests.c
-rw-r--r-- 1 www-data www-data    574 Sep 21 21:42 instructions
-rw-r--r-- 1 www-data www-data    671 Sep 22 11:57 makefile
-rw-r--r-- 1 www-data www-data   1154 Sep 22 12:01 output
-rwxr-xr-x 1 www-data www-data   8728 Sep 22 12:01 test
www-data@e5fd79b041aa: ./cyber-dojo.sh
gcc -x c -I. -Wall -Wextra -Werror -std=c11  -Wstrict-prototypes -Wmissing-prototypes -Wshadow -Wfloat-equal -O -c -o hiker.compiled_h hiker.h
gcc -I. -Wall -Wextra -Werror -std=c11  -Wstrict-prototypes -Wmissing-prototypes -Wshadow -Wfloat-equal -O hiker.c hiker.tests.c -o test
./test
All tests passed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rsync options
-r recursive  
-t preserve *times*

Note: cyber-dojo as rsync target folder is unique-enough because this is inside the container!

Okay. And restricting rsync to the docker containers.

ssh into server and running two [docker run] commands. ifconfig says their IP addresses are
172.17.0.10
172.17.0.11
$ nano /etc/rsyncd.conf
ADD
hosts allow = 172.17.0.0/255.255.255.0

Kill rsync daemon
$ kill `cat /var/run/rsyncd.pid`

Restart it
$ rsync --daemon

Repeat rsync above from inside docker container. Works.

Now to try it from terminal on macbook pro.
IP of rails-server is 54.211.24.101
$ rsync -rtW rsyncclient@54.211.24.101::katas/59/944533D0/buffalo/sandbox /tmp
@ERROR: Unknown module 'katas'
rsync error: error starting client-server protocol (code 5) at /SourceCache/rsync/rsync-45/rsync/main.c(1398) [receiver=2.6.9]

Another advantage of using rsync is that I don't have to add
git-daemon-export-ok to every existing kata.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Setting the daemon to start automatically.

Kill rsync daemon
$ kill `cat /var/run/rsyncd.pid`

cd /etc/init.d
already has an [rsync] file
Changed line
RSYNC_ENABLE=false
to
RSYNC_ENABLE=true

$ /etc/init.d/rsync restart

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Optimize rsync
-W copy files whole (w/o delta-xfer algorithm)


$ ip route show | grep docker0 | awk '{print $9}'
172.17.42.1
$ docker run -it --rm --user=www-data -e RSYNC_PASSWORD='password' cyberdojofoundation/gcc-4.8.4_assert /bin/bash
www-data@e5fd79b041aa: rsync -rtW rsyncclient@172.17.42.1::katas/59/944533D0/buffalo/sandbox /tmp
www-data@e5fd79b041aa: cd /tmp/sandbox
www-data@e5fd79b041aa: ls -al
total 444
drwxr-xr-x 2 www-data www-data   4096 Sep 22 12:01 .
drwxr-xr-x 3 www-data www-data   4096 Sep 22 12:21 ..
-rw------- 1 www-data www-data 401408 Sep 21 21:42 core
-rwxr-xr-x 1 www-data www-data     25 Sep 22 12:01 cyber-dojo.sh
-rw-r--r-- 1 www-data www-data     59 Sep 22 11:52 hiker.c
-rw-r--r-- 1 www-data www-data    929 Sep 22 12:01 hiker.compiled_h
-rw-r--r-- 1 www-data www-data     73 Sep 21 21:42 hiker.h
-rw-r--r-- 1 www-data www-data    270 Sep 21 21:42 hiker.tests.c
-rw-r--r-- 1 www-data www-data    574 Sep 21 21:42 instructions
-rw-r--r-- 1 www-data www-data    671 Sep 22 11:57 makefile
-rw-r--r-- 1 www-data www-data   1154 Sep 22 12:01 output
-rwxr-xr-x 1 www-data www-data   8728 Sep 22 12:01 test

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now to simulate the rsync calls coming from a different computer.

digital-ocean node: eg  IP = 178.62.115.39

On testBed which has rsync installed
$ nano /etc/rsyncd.conf
EDIT 
hosts allow = 172.17.0.0/255.255.255.0, 178.62.115.39

Restart rsync
$ /etc/init.d/rsync restart

On digital-ocean node (direct, not inside docker container)
$ rsync -rtW rsyncclient@<IP_OF_TESTBED>::katas/59/944533D0/buffalo/sandbox cyber-dojo/
Password
And it works.

Now to try on digital-ocean node inside a docker container
$ docker run -it --rm --user=www-data -e RSYNC_PASSWORD='password' cyberdojofoundation/gcc-4.8.4_assert /bin/bash
$.......: rsync -rtW rsyncclient@<IP_OF_TESTBED>::katas/59/944533D0/buffalo/sandbox /tmp
YES. That worked.


Do I need to open 873 on Turnkey?
Removed it from turnkey
On testBed
$ /etc/init.d/rsync restart

Back on digital-ocean node
$ rsync -rtW rsyncclient@<IP_OF_TESTBED>::katas/59/944533D0/buffalo/sandbox /tmp
Password
And it works.

on digital-ocean node from inside docker container
$ docker run -it --rm --user=www-data -e RSYNC_PASSWORD='password' cyberdojofoundation/gcc-4.8.4_assert /bin/bash
$.......: rsync -rtW rsyncclient@<IP_OF_TESTBED>::katas/59/944533D0/buffalo/sandbox /tmp
YES. That worked.

So I don't need a 873 (rsync) entry in the Turnkey firewall.
Just need each of the computer nodes' IP addresses in 
/etc/rsyncd.conf
and then
$ /etc/init.d/rsync restart

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

