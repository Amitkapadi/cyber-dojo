
DockerTmpRunner - DockerKatasRunner
------------------------------------
Both need to write to katas/ but only to save results.
Be that via a data-container or a volume-mount
Be that via a microservice or not


But KatasRunner also needs to *read* from katas/

One issue is: what are the date-time stamps on the files inside the run-container?
o) tmp-runner   == brand new
o) katas-runner == as from last time if the file didn't change

One issue is: what files are actually inside the run-container?
o) tmp-runner   == only the visible files.
o) katas-runner == everything, .o file, executables, etc.

What are the trade offs?

B = Browser
V = volume on host
D = data-container
L = local volume
R = run-container

katas-volume-runner
-------------------
changed files are copied into katas/...
cyber-dojo.sh run directly in katas/... inside container
   - uid dependency on host
   - direct coupling between the runner and the katas/... folder (volume mount)
        - katas/ holds src files and intermediates (eg .o files)
   - file copying
        - 1st B       -> V:katas/... (changed only, preserve date-time stamps) RUN+DIFF
        - <<RUN>>
        - 2nd output  -> V:katas/...
        - <<GIT-COMMIT>>
        - 3rd output  -> B

katas-data-container-runner (can't volume-mount)
---------------------------
changed files are copied into katas sub-folder
*all* files in katas/... are tar piped into tmp/... in container
cyber-dojo.sh runs in tmp/... inside container
*all* files in tmp/... in container are tar|piped *back* to katas/...
    - no uid dependency on host
    - indirect coupling between runner and katas/... (via path argument)
        - katas holds src files and intermediates (eg .o files)
    - file copying
        - 1st B           -> D:katas/... (changed only, preserve date-time stamps)
        - 2nd D:katas/... -> R:tmp/...   (all)
        - <<RUN>>
        - 3rd R:tmp/...   -> D:katas/... (all, preserve data-time stamps) <<<<<<<<<<<<<<<<<<<<<<<
        - 4th output      -> D:katas
        - <<GIT-COMMIT>>
        - 5rd output      -> B
    STEP 3 IS THE CRUCIAL ONE.
    IT MEANS ITS POSSIBLE TO AVOID VOLUME MOUNT AND GET INCREMENTAL BUILDS


tmp-runner
----------
all files are copied into tmp/...
*all* files in tmp/... are tar piped into tmp/... in container
cyber-dojo.sh runs in tmp/... inside container
output returned
    - elsewhere output and (changed) files saved to katas
        - katas could be volume-mount on host
        - katas could be data container
    - no uid dependency on host
    - no coupling between runner and katas/...
    - file copying
        - 1st B         -> L:tmp/... (all, date-time stamps are new)
        - 2nd L:tmp/... -> C:tmp/... (all)
          <<RUN>>
        - 3rd B         -> KATAS
        - 4th output    -> KATAS
          <<GIT_COMMIT>>
        - 5th output    -> B

