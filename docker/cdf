#!/bin/sh
set -e

HOME=/usr/src/cyber-dojo         # home folder *inside* the web-image
REPO=cyberdojofoundation         # username on docker hub

KATAS_DEFAULT=${HOME}/app/katas
RAILS_ENV_DEFAULT=development
RUNNER_DEFAULT=DockerTmpRunner

KATAS=${KATAS_DEFAULT}           # where katas are stored on the *host*
RAILS_ENV=${RAILS_ENV_DEFAULT}   # rails server -e ${RAILS_ENV}
RUNNER=${RUNNER_DEFAULT}         # See app/models/dojo.rb

ME="./$( basename ${0} )"
MY_DIR="$( cd "$( dirname "${0}" )" && pwd )"

IMAGES=(nginx web)    # TODO: get these from docker-compose config --services

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO: make commands forward to cyber-dojo
# TODO: logs better names
# TODO: rmi could be more efficient

show_use()
{
  echo
  echo "Usage: ${ME} COMMAND..."
  echo "       ${ME} help"
  echo
  echo 'Commands:'
  echo '    bu                     build + up'
  echo '    build                  Builds cyber-dojo server images'
  echo '    clean                  Removes untagged images'
  echo '    down                   Brings down cyber-dojo server'
 #echo '    exec COMMAND...        Execs a command in cyber-dojo server container'
  echo '    logs_rails             Prints cyber-dojo server rails log'
  echo '    logs_web               Prints cyber-dojo server container log'
  echo '    ps                     Lists cyber-dojo containers'
  echo '    pss                    Lists processes inside cyber-dojo server'
  echo '    pull                   Pulls cyber-dojo server images from repo'
  echo '    push                   Pushs cyber-dojo server images to repo'
  echo '    restart                Restarts the cyber-dojo server'
  echo '    rm                     Removes local cyber-dojo server containers'
  echo '    rmi                    Removes local cyber-dojo server images'
  echo '    sh                     Opens a shell inside the cyber-dojo server container'
 #echo '    test [PATH] [ARG...]   Runs PATH tests inside cyber-dojo server container'
  echo '    up [OPTIONS]           Brings up cyber-dojo server'
  echo
  echo 'up [OPTIONS]:'
  echo "        katas=/var/www/cyber-dojo/katas            default:     katas=${KATAS_DEFAULT}"
  echo "    rails_env=[development|production]             default: rails_env=${RAILS_ENV_DEFAULT}"
  echo "       runner=[DockerTmpRunner|DockerKatasRunner]  default:    runner=${RUNNER_DEFAULT}"
  echo
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

build()
{
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  for IMAGE in ${IMAGES[*]}
  do
    echo ${REPO}/${IMAGE}
    ./${IMAGE}/build-docker-image.sh ${HOME}
    if [ $? -ne 0 ]; then
      echo "BUILDING ${REPO}/${IMAGE} FAILED"
      exit
    fi
  done
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

clean()
{
  docker images | grep "^<none>" | awk '{print $3}' | xargs docker rmi --force
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

down()
{
  ${DOCKER_COMPOSE_CMD} stop  2> /dev/null
  ${DOCKER_COMPOSE_CMD} rm -f 2> /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

logs_rails()
{
  # TODO: get container name properly
  docker exec cyber-dojo-server sh -c "cd log && tail -100 development.log"
}

logs_web()
{
  # TODO: get container name properly
  docker logs cyber-dojo-server
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ps()
{
  docker ps -a | head -1
  docker ps -a | grep $REPO
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pss()
{
  docker exec cyber-dojo-server ps
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pull()
{
  for IMAGE in ${IMAGES[*]}
  do
    echo "PULLING: ${REPO}/${IMAGE}"
    docker pull ${REPO}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

push()
{
  # TODO: this works from a terminal
  #     docker push cyberdojofoundation/web
  # but
  #     ./cdf push
  # fails?! with
  # unauthorized: access to the requested resource is not authorized
  #
  # $ docker login
  # username: jonjagger
  # password: ...
  # email: ...

  for IMAGE in ${IMAGES[*]}
  do
    echo "PUSHING: ${REPO}/${IMAGE}"
    docker push ${REPO}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

restart()
{
  down
  up
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rm()
{
  for IMAGE in ${IMAGES[*]}
  do
    docker ps -a \
    | grep ${REPO}/${IMAGE} \
    | awk '{print $1}' \
    | xargs docker rm -f
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rmi()
{
  for IMAGE in ${IMAGES[*]}
  do
    docker rmi -f ${REPO}/${IMAGE} 2&> /dev/null
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

sh()
{
  # TODO: get container name properly
  docker exec --interactive --tty cyber-dojo-server sh
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

test()
{
  # After [up] tests can be run *inside* the container, eg
  # $ docker exec web_1 bash -c "cd test/app_models && ./test_dojo.rb"
  # TODO:
  true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

up()
{
  exit_if_bad_katas
  exit_if_bad_rails_env
  exit_if_bad_runner
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  ./cyber-dojo up rails_env=${RAILS_ENV} katas=${KATAS} runner=${RUNNER}
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - -

exit_if_bad_katas()
{
  # if KATAS==KATAS_DEFAULT assume this cyber-dojo server is *not*
  # being hosted where a previous (non dockerized) server lived.
  # In this case the KATAS volume mount in docker-compose.yml will
  # create the KATAS_DEFAULT directory on the host.
  if [ "${KATAS}" != "${KATAS_DEFAULT}" ] &&
     [ ! -d "${KATAS}" ];
  then
    echo "${ME}: katas=${KATAS} ? ${KATAS} directory does not exist"
    echo "See ${ME} help"
    exit
  fi
}

# - - - - - - - - - - -

exit_if_bad_rails_env()
{
  if [ "${RAILS_ENV}" != 'development' ] &&
     [ "${RAILS_ENV}" != 'production' ];
  then
    echo "${ME} rails_env=${RAILS_ENV} ?"
    echo "See ${ME} help"
    exit
  fi
  if [ "${RAILS_ENV}" == 'production' ]; then
    # <<<<<<< TODO >>>>>>>>
    echo 'rails_env=production'
    echo '>>>> not supported yet'
    echo '>>>> Dockerfile currently hard-wires development'
    echo '>>>> up abandoned'
    exit
  fi
}

# - - - - - - - - - - -

exit_if_bad_runner()
{
  if [ "${RUNNER}" != 'DockerTmpRunner' ] &&
     [ "${RUNNER}" != 'DockerKatasRunner' ];
  then
    echo "${ME} runner=${RUNNER} ?"
    echo "See ${ME} help"
    exit
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ $# -eq 0 ]; then
  show_use
  exit
fi

for arg in "$@"
do
  case ${arg} in
    help)
      show_use
      exit
      ;;
    bu)
      doBu=true
      ;;
    build)
      doBuild=true
      ;;
    clean)
      doClean=true
      ;;
    down)
      doDown=true
      ;;
    #exec)
    #  doExec=true
    #  ;;
    logs_rails)
      doLogsRails=true
      ;;
    logs_web)
      doLogsWeb=true
      ;;
    ps)
      doPs=true
      ;;
    pss)
      doPss=true
      ;;
    pull)
      doPull=true
      ;;
    push)
      doPush=true
      ;;
    restart)
      doRestart=true
      ;;
    rm)
      doRm=true
      ;;
    rmi)
      doRmi=true
      ;;
    sh)
      doSh=true
      ;;
    #test)
    #  doTest=true
    #  ;;
    up)
      doUp=true
      ;;
    katas=*)
      KATAS="${arg#*=}"
      ;;
    rails_env=*)
      RAILS_ENV="${arg#*=}"
      ;;
    runner=*)
      RUNNER="${arg#*=}"
      ;;
    *)
      echo "${ME}: ${arg} ?"
      echo "See '${ME} help"
      exit
      ;;
  esac
done

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# process all arguments before executing
# commands to be sure nothing is unknown

#if [ -n "${doExec}"    ]; then exec   ; exit; fi
#if [ -n "${doTest}"    ]; then test   ; exit; fi

if [ -n "${doLogsRails}" ]; then logs_rails; exit; fi
if [ -n "${doLogsWeb}"   ]; then   logs_web; exit; fi

if [ -n "${doBu}"      ]; then build && up; exit; fi

if [ -n "${doBuild}"   ]; then build  ; exit; fi
if [ -n "${doClean}"   ]; then clean  ; exit; fi
if [ -n "${doDown}"    ]; then down   ; exit; fi
if [ -n "${doPs}"      ]; then ps     ; exit; fi
if [ -n "${doPss}"     ]; then pss    ; exit; fi
if [ -n "${doPull}"    ]; then pull   ; exit; fi
if [ -n "${doPush}"    ]; then push   ; exit; fi
if [ -n "${doRestart}" ]; then restart; exit; fi
if [ -n "${doRm}"      ]; then rm     ; exit; fi
if [ -n "${doRmi}"     ]; then rmi    ; exit; fi
if [ -n "${doSh}"      ]; then sh     ; exit; fi
if [ -n "${doUp}"      ]; then up     ; exit; fi
