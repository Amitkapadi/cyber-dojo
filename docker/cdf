#!/bin/bash

MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
HUB=cyberdojofoundation
IMAGES=(nginx web)

HOME=/usr/app/cyber-dojo          # home folder inside the web-image

# defaults
RAILS_ENV_DEFAULT=development
RUNNER_DEFAULT=DockerTmpRunner

KATAS=/usr/app/cyber-dojo/katas
RAILS_ENV=${RAILS_ENV_DEFAULT}
RUNNER=${RUNNER_DEFAULT}

ME="$(basename $0)"

# - - - - - - - - - - - - - - - - - - - - - -

function show_use {
  echo "Usage: ${ME} COMMAND..."
  echo "       ${ME} help"
  echo
  echo 'Commands:'
  echo '    bash                   Shell into cyber-dojo server container'
  echo '    build                  Build cyber-dojo server images'
 #echo '    exec COMMAND...        Exec a command in cyber-dojo server container'
  echo '    pull                   Pull cyber-dojo server images from hub'
  echo '    push                   Push cyber-dojo server images to hub'
  echo '    rm                     Remove cyber-dojo server containers'
  echo '    rmi                    Remove cyber-dojo server images'
 #echo '    test [PATH] [ARG...]   Run PATH tests inside cyber-dojo container'
  echo '    up [OPTIONS]           Bring up cyber-dojo server'
  echo
  echo 'Options:'
  echo "    katas=PATH (default=${KATAS})"
  echo "    rails_env=[development|production] (default=${RAILS_ENV_DEFAULT})"
  echo "    runner=[DockerTmpRunner|DockerKatasRunner] (default=${RUNNER_DEFAULT})"
}

function exit_if_bad_katas {
  # TODO: check katas folder exists
  true
}

function exit_if_bad_rails_env {
  if [ "${RAILS_ENV}" != 'development' ] && [ "${RAILS_ENV}" != 'production' ]; then
    echo "${ME} rails_env=${RAILS_ENV} ?"
    echo "See ${ME} help"
    exit
  fi
}

function exit_if_bad_runner {
  if [ "${RUNNER}" != 'DockerTmpRunner' ] && [ "${RUNNER}" != 'DockerKatasRunner' ]; then
    echo "${ME} runner=${RUNNER} ?"
    echo "See ${ME} help"
    exit
  fi
}

# - - - - - - - - - - - - - - - - - - - - - -

function bash {
  docker run --rm -it ${HUB}/web bash
}

# - - - - - - - - - - - - - - - - - - - - - -

function build {
  pushd ${MY_DIR} > /dev/null
  for IMAGE in ${IMAGES[*]}
  do
    echo ${IMAGE}
    ./${IMAGE}/build-docker-image.sh ${HOME}
    if [ $? -ne 0 ]; then
      echo "BUILDING ${HUB}/${IMAGE} FAILED"
      exit
    fi
  done
  popd > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function pull {
  for IMAGE in ${IMAGES[*]}
  do
    echo "---------------------------------------"
    echo "PULLING: ${HUB}/${IMAGE}"
    docker pull ${HUB}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function push {
  for IMAGE in ${IMAGES[*]}
  do
    echo "---------------------------------------"
    echo "PUSHING: ${HUB}/${IMAGE}"
    docker push ${HUB}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function rm {
  # remove containers
  for IMAGE in ${IMAGES[*]}
  do
    docker ps -a \
    | grep ${HUB}/${IMAGE} \
    | awk '{print $1}' \
    | xargs docker rm -f
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function rmi {
  # remove images
  for IMAGE in ${IMAGES[*]}
  do
    docker rmi -f ${HUB}/${IMAGE} 2&> /dev/null
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function test {
  # After [up] tests can be run *inside* the container, eg
  # $ docker exec web_1 bash -c "cd test/app_models && ./test_dojo.rb"
  # TODO:
  true
}

# - - - - - - - - - - - - - - - - - - - - - -

function up {
  pushd ${MY_DIR} > /dev/null
  ./cyber-dojo up rails_env=${RAILS_ENV} katas=${KATAS} runner=${RUNNER}
  popd > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - -

if [  $# -eq 0 ]; then
  show_use
  exit
fi

for arg in "$@"
do
  case ${arg} in
    help)
      show_use
      exit
      ;;
    bash)
      doBash=true
      ;;
    build)
      doBuild=true
      ;;
    #exec)
    #  doExec=true
    #  ;;
    pull)
      doPull=true
      ;;
    push)
      doPush=true
      ;;
    rm)
      doRm=true
      ;;
    rmi)
      doRmi=true
      ;;
    #test)
    #  doTest=true
    #  ;;
    up)
      doUp=true
      ;;
    katas=*)
      KATAS="${arg#*=}"
      exit_if_bad_katas
      ;;
    rails_env=*)
      RAILS_ENV="${arg#*=}"
      exit_if_bad_rails_env
      ;;
    runner=*)
      RUNNER="${arg#*=}"
      exit_if_bad_runner
      ;;
    *)
      echo "# <${arg}> ?"
      show_use
      exit
      ;;
  esac
done

if [ "$doBash" == true ]; then bash; exit; fi
#if [ "$doExec" == true ]; then exec; exit; fi
if [ "$doPull" == true ]; then pull; exit; fi
if [ "$doPush" == true ]; then push; exit; fi

# - - - - - - - - - - - - - - - - - - - - - -
# Do in sensible order...

if [ "$doRm"    == true ]; then rm   ; fi
if [ "$doRmi"   == true ]; then rmi  ; fi
if [ "$doBuild" == true ]; then build; fi
if [ "$doUp"    == true ]; then up   ; fi
#if [ "$doTest"  == true ]; then test ; fi

