#!/bin/sh
set -e

ARGS=${@}
HOME=/usr/src/cyber-dojo         # home folder *inside* the server image
REPO=cyberdojofoundation         # username on docker hub

KATAS_DEFAULT=${HOME}/katas
RAILS_ENV_DEFAULT=development
RUNNER_DEFAULT=DockerKatasRunner

KATAS=${KATAS_DEFAULT}           # where katas are stored on the *host*
RAILS_ENV=${RAILS_ENV_DEFAULT}   # rails server -e ${RAILS_ENV}
RUNNER=${RUNNER_DEFAULT}         # See app/models/dojo.rb

ME="./$( basename ${0} )"
MY_DIR="$( cd "$( dirname "${0}" )" && pwd )"

IMAGES=(user-base nginx web)     # important this does NOT include katas

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO: detect if more than one command entered.
# TODO: get IMAGES from docker-compose config --services
# TODO: logs better names
# TODO: rmi could be more efficient
# TODO: use: echo '    exec COMMAND...        Execs a command in cyber-dojo server container'
# TODO: use: echo '    test [PATH] [ARG...]   Runs PATH tests inside cyber-dojo server container'

show_use()
{
  echo
  echo "Usage: ${ME} COMMAND..."
  echo "       ${ME} help"
  echo
  echo 'Commands:'
#echo '    dbu                    (down + build + up)'
  echo '    build                  Builds cyber-dojo server images'
  echo '    clean                  Removes untagged images'
  echo
  echo '    ps                     Lists server containers'
  echo '    start                  Starts server containers'
  echo '    sh                     Shells into the main server container'
  echo '    stop                   Stop server containers'
  echo '    rm                     Removes server containers'
  echo '    up [OPTIONS]           Creates and starts server containers'
  echo
  echo '    images                 Lists pulled language images'
  echo "    logs_rails             Prints server's' rails log"
  echo "    logs_web               Prints server's' container log"
  echo '    pull                   Pulls server images from repo'
  echo '    push                   Pushes server images to repo'
  echo '    repo                   Lists all language images'
  echo '    rmi                    Removes server images'
  echo
  echo 'up [OPTIONS]:'
  echo "        katas=/var/www/cyber-dojo/katas                default:     katas=${KATAS_DEFAULT}"
  echo "    rails_env=[development|production]                 default: rails_env=${RAILS_ENV_DEFAULT}"
  echo "       runner=[DockerKatasRunner|DockerMachineRunner]  default:    runner=${RUNNER_DEFAULT}"
  echo
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

sh()
{
  # TODO: get container name properly
  docker exec --interactive --tty cyber-dojo-server sh
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

build()
{
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  for IMAGE in ${IMAGES[*]}
  do
    echo ${REPO}/${IMAGE}
    ./${IMAGE}/build-image.sh $HOME
  done
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

clean()
{
  docker images -q -f='dangling=true' | xargs docker rmi --force
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

logs_rails()
{
  # TODO: get container name properly
  docker exec cyber-dojo-server sh -c "cd log && tail -100 development.log"
}

logs_web()
{
  # TODO: get container name properly
  docker logs cyber-dojo-server
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pull()
{
  for IMAGE in ${IMAGES[*]}
  do
    echo "PULLING: ${REPO}/${IMAGE}"
    docker pull ${REPO}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

push()
{
  # TODO: this works from a terminal
  #     docker push cyberdojofoundation/web
  # but
  #     ./cdf push
  # fails?! with
  # unauthorized: access to the requested resource is not authorized
  #
  # $ docker login
  # username: jonjagger
  # password: ...
  # email: ...

  for IMAGE in ${IMAGES[*]}
  do
    echo "PUSHING: ${REPO}/${IMAGE}"
    docker push ${REPO}/${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rmi()
{
  for IMAGE in ${IMAGES[*]}
  do
    docker rmi -f ${REPO}/${IMAGE} 2&> /dev/null
  done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

test()
{
  # After [up] tests can be run *inside* the container, eg
  # $ docker exec web_1 bash -c "cd test/app_models && ./test_dojo.rb"
  # TODO:
  true
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delegate()
{
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  ./cyber-dojo ${ARGS}
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ $# -eq 0 ]; then
  show_use
  exit
fi

for ARG in "$@"
do
  case ${ARG} in
    help)
      show_use
      exit
      ;;
    build)
      doBuild=true
      ;;
    clean)
      doClean=true
      ;;
    # - - - - - - - CONTAINERS - - - - - - - -
    ps)
      doPs=true
      ;;
    rm)
      doRm=true
      ;;
    start)
      doStart=true
      ;;
    sh)
      doSh=true
      ;;
    stop)
      doStop=true
      ;;
    up)
      doUp=true
      ;;
    # - - - - - - - OPTIONS - - - - - - - -
    katas=*)
      KATAS="${ARG#*=}"
      ;;
    rails_env=*)
      RAILS_ENV="${ARG#*=}"
      ;;
    runner=*)
      RUNNER="${ARG#*=}"
      ;;
    # - - - - - - - IMAGES - - - - - - - -
    images)
      doImages=true
      ;;
    logs_rails)
      doLogsRails=true
      ;;
    logs_web)
      doLogsWeb=true
      ;;
    pull)
      doPull=true
      ;;
    push)
      doPush=true
      ;;
    repo)
      doRepo=true
      ;;
    rmi)
      doRmi=true
      ;;
    # - - - - - - - SOMETHING'S NOT RIGHT - - - - - - - -
    *)
      echo "${ME}: ${ARG} ?"
      echo "See '${ME} help"
      exit
      ;;
  esac
done

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# process all arguments before executing
# commands to be sure nothing is unknown

#if [ -n "${doExec}"    ]; then exec   ; exit; fi
#if [ -n "${doTest}"    ]; then test   ; exit; fi

if [ -n "${doLogsRails}" ]; then logs_rails; exit; fi
if [ -n "${doLogsWeb}"   ]; then logs_web  ; exit; fi

if [ -n "${doPs}"      ]; then delegate; exit; fi
if [ -n "${doStart}"   ]; then delegate; exit; fi
if [ -n "${doSh}"      ]; then sh     ; exit; fi
if [ -n "${doStop}"    ]; then delegate; exit; fi
if [ -n "${doRm}"      ]; then delegate; exit; fi
if [ -n "${doUp}"      ]; then delegate; exit; fi


if [ -n "${doImages}"  ]; then delegate; exit; fi
if [ -n "${doPss}"     ]; then delegate; exit; fi
if [ -n "${doRepo}"    ]; then delegate; exit; fi

if [ -n "${doBuild}"   ]; then build  ; exit; fi
if [ -n "${doClean}"   ]; then clean  ; exit; fi
if [ -n "${doPull}"    ]; then pull   ; exit; fi
if [ -n "${doPush}"    ]; then push   ; exit; fi
if [ -n "${doRmi}"     ]; then rmi    ; exit; fi
