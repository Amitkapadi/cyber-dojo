
Add file for OSX too (sw_vers is the command)
On OSX Docker-Quickstart-Terminal you will need to...
$ docker-machine ssh default
run commands from there (which ones? what is default based on?)
Answer=Tiny Core. Has sh not bash

Checkout the procedure on a Windows box too

Auto-detect which version of linux I'm on (lsb_release) ?

Does pull.sh still do an image update check?
It still calls caches/refresh_all.sh *after* the git pull.
So refresh_all could be updated to reinstate the image update.

Also, this way I don't double the number of images on the hub.

There is a --tmpfs option on docker run. Look into that.
https://docs.docker.com/engine/userguide/containers/dockervolumes/ (look for :z)

volume mount has ro,rw and also other options, eg z for sharing.
https://docs.docker.com/engine/userguide/containers/dockervolumes/ (look for z option)

The kata data container suffers from the same problem as the
tmp data container. It does not seem possible to limit the runner's
view of it to just its sub-folder.
So it seems volume mounting katas from the outside is back on the cards.

https://docs.docker.com/engine/userguide/containers/dockervolumes/
Also has this
<quote>
Note: Docker will not warn you when removing a container without providing the -v option to delete its volumes. If you remove containers without using the -v option, you may end up with “dangling” volumes; volumes that are no longer referenced by a container. You can use docker volume ls -f dangling=true to find dangling volumes, and use docker volume rm <volume name> to remove a volume that’s no longer needed.
</quote>

I tried
$ docker volume ls -f dangling=true
And sure enough I had a bucket load of dangling volumes
Got rid of them using
$ docker volume rm $(docker volume ls -qf dangling=true)
See if normal start, restart creates a new one.
Then investigate.
Ok. Did
$ ./cdf.sh --clean --build --up=development
And now there are 3 dangling volumes
$ docker volumes ls -f dangling=true
DRIVER              VOLUME NAME
local               880f0b0dab2f8a19cf7b2ffeb7d3e65a9262cdbeb13b8f24ea1edaa692f6575d
local               caf568ca77374e4ecc4268f787b05b3da5c7d002423c317a2233f2dea0ee2c41
local               15f1c23752c125505777643b9f2dcb50eb06da636ccfea2f4fc606db1aaa803d
How can I find out about those?
$ docker ps -a
shows just the usual 6 containers
c5bdd8b87efd  nginx
c13f0dac8e2d  web
84e2cef0439b  test
30a7b6b2b155  exercises
a13513a3f8cc  languages
d6bbd5c724ec  katas

$ docker-machine ssh default
$ sudo -u root sh
$ cd  /var/lib/docker/volumes
$ ls
there they are
$ cd 880f0b...
$ cd _data
$ ls
880f0b is the exercises volume
caf568 is the test volume
15f1c2 is the languages volume

I'm guessing these are coming from the --clean --build somehow
did a ./cdf.sh --clean
Now
$ docker volume ls -f dangling=true
shows 6 dangling volumes
359... thats test

