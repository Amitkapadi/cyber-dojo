
# Partial docker-compose.yml file for bringing up cyber-dojo.
# Must be combined with a docker-compose extension file which
# adds web volume mounts for docker itself (docker in docker).

nginx:
  image: cyberdojofoundation/nginx
  links:
    - "web:cyberdojo_web"
  ports:
    - "80:80"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

web:
  image: cyberdojofoundation/web

  user: www-data
  # user=www-data is failing because rails wont start. On startup
  # rails writes to /var/www/cyber-dojo/tmp/cache
  # Fixed that by adding
  # USER www-data
  # to web Dockerfile
  #
  # Now the problem is that the [docker] commands being run
  # *inside* the web container (docker in docker) fail because
  # www-data does not have rights. I think there are two options
  #
  # 1. put www-data into the docker group as per
  #    https://docs.docker.com/engine/installation/ubuntulinux/#optional-configurations
  #    so I don't have to use sudo when using the docker command.
  #    I'd prefer not to do this if possible, as the docker group is
  #    equivalent to root.
  #
  # 2. as root do something like this, aiming to allow www-data to
  #    not have to sudo but *only* for the docker command.
  #    I should be able to put this at the top of web's Dockerfile.
  #
  #       $ adduser www-data sudo
  #       $ echo '%sudo ALL=(ALL) NOPASSWD:/usr/local/bin/docker' >> /etc/sudoers
  #
  #    Or do those commands have to be run on the host?
  #    Or do they have to be run on the boot2docker VM OSX is hosting.
  #    export|grep DOCKER
  #    reveals options suggesting docker commands forward to default in docker-machine
  #
  #       create a user with no password
  #       $ docker-machine ssh default sudo adduser -D www-data
  #       allow www-data to run docker command
  #       $ docker-machine ssh default echo 'www-data ALL=(ALL) NOPASSWD:/usr/local/bin/docker' >> /etc/sudoers
  #       but can't do that in a command. Did it manually
  #       $ docker-machine ssh default
  #       $ sudo visudo
  #       Think I have to do the same thing for the socket
  #       Nope. Don't think that's right.
  #       Lets get a basic working version first. Just add www-data to docker user
  #
  #       $ docker-machine ssh default sudo adduser -D www-data
  #       $ docker-machine ssh default sudo adduser www-data docker
  #
  #    Nope still didn't work. Do I need to make sure both www-data users
  #    have the same UID? they don't. On host=1002, inside container=33 (from rails)
  #
  #       $ docker-machine ssh default sudo adduser -D -u 33 www-data docker
  #
  #    Yes. Now it's 33.
  #    Still doesn't work. Ahhhh
  #    It can't connect to the *daemon*
  #    Is this because the DOCKER_HOST etc settings are on the terminal
  #    but not inside the container?
  #    Set them.
  #    And added a volume for where the CERT_PATH is
  #    DOCKER_CERT_PATH="/Users/jonjagger/.docker/machine/machines/default"
  #    And it looks like I'm almost there!
  #    Problem now is permission of the cert.
  #    Could not read CA certificate "/Users/jonjagger/.docker/machine/machines/default/ca.pem":
  #       .... permission denied
  #
  #    The file itself is readable but the directory it lives in is not.
  #    Hmmmmm. Once this works will I need to volume mount the docker-socket?
  #    Won't the docker-binary be enough?
  #    Won't docker commands use docker-machine to ssh tunnel across...
  #
  #    Ah there are other pem files. Copying them all to just try and get up.
  #    Could not load X509 key pair: open /var/www/cyber-dojo/pems/key.pem:
  #       permission denied. Make sure the key is not encrypted
  #    $ chmod +r *.pem


  volumes:
    - /var/www/cyber-dojo/katas:/var/www/cyber-dojo/katas:rw
  volumes_from:
    - exercises:ro
    - languages:ro
    - tmp:rw
  ports:
    - "3000:3000"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

languages:
  image: cyberdojofoundation/languages
  entrypoint: /bin/sh

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

exercises:
  image: cyberdojofoundation/exercises
  entrypoint: /bin/sh

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

tmp:
  image: cyberdojofoundation/tmp
  entrypoint: /bin/sh
  container_name: cyberdojo_tmp_data_container
