#!/bin/bash

# TODO: check docker installed
# TODO: check docker-compose is installed

HOME=/usr/app/cyber-dojo          # home folder inside the web-image
HUB=cyberdojofoundation           # docker hub username

# defaults
RAILS_ENV_DEFAULT=production
RUNNER_DEFAULT=DockerTmpRunner

KATAS=/usr/app/cyber-dojo/katas
RAILS_ENV=${RAILS_ENV_DEFAULT}
RUNNER=${RUNNER_DEFAULT}

ME="$(basename $0)"

# - - - - - - - - - - - - - - - - - - - - - -

function show_use {
  echo "Usage: ${ME} COMMAND"
  echo "       ${ME} help"
  echo
  echo 'Commands:'
  echo '    bootstrap         Pull common language images and bring up'
  echo '    latest            Pull latest language images'
  echo '    ls                List all cyber-dojo language images'
  echo '    pull=IMAGE        Pull cyber-dojo language IMAGE'
  echo '    up [OPTIONS]      Bring up cyber-dojo server'
  echo
  echo 'Options:'
  echo "    katas=PATH (default=${KATAS})"
  echo "    rails_env=[development|production] (default=${RAILS_ENV_DEFAULT})"
  echo "    runner=[DockerTmpRunner|DockerKatasRunner] (default=${RUNNER_DEFAULT})"
}

function exit_if_bad_rails_env {
  if [ "${RAILS_ENV}" != 'development' ] && [ "${RAILS_ENV}" != 'production' ]; then
    echo "${ME}: rails_env=${RAILS_ENV} ?"
    echo "See ${ME} help"
    exit
  fi
}

function exit_if_bad_katas {
  # TODO: check katas folder exists
  true
}

function exit_if_bad_runner {
  if [ "${RUNNER}" != 'DockerTmpRunner' ] && [ "${RUNNER}" != 'DockerKatasRunner' ]; then
    echo "${ME}: runner=${RUNNER} ?"
    echo "See ${ME} help"
    exit
  fi
}

# - - - - - - - - - - - - - - - - - - - - - -

function bootstrap {
  IMAGES=(gcc_assert ruby_mini_test)
  for IMAGE in ${IMAGES[*]}
  do
    pull ${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function list_all_language_images {
  docker run --rm ${HUB}/web bash -c "./languages/list_all_images.rb"
}

function ls {
  list_all_language_images
}

# - - - - - - - - - - - - - - - - - - - - - -

function pull {
  docker pull ${HUB}/${IMAGE}:latest
}

# - - - - - - - - - - - - - - - - - - - - - -

function latest {
  ALL_LANGUAGE_IMAGES=`list_all_language_images | awk '{print $NF}' | sort`
  PULLED_IMAGES=`docker images | grep ${HUB} | awk '{print $1}'`
  SPLIT=${PULLED_IMAGES//\/// }
  PULLED_IMAGES=`echo "${SPLIT}" | awk '{print $NF}' | sort`
  PULLED_LANGUAGE_IMAGES=`comm -12 <(echo "${ALL_LANGUAGE_IMAGES}") <(echo "${PULLED_IMAGES}")`
  for IMAGE in ${PULLED_LANGUAGE_IMAGES[*]}
  do
    pull ${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function up {
  export CYBER_DOJO_RAILS_ENV=${RAILS_ENV}
  export CYBER_DOJO_LANGUAGES_ROOT=${HOME}/languages
  export CYBER_DOJO_EXERCISES_ROOT=${HOME}/exercises
  export CYBER_DOJO_CACHES_ROOT=${HOME}/caches
  export CYBER_DOJO_KATAS_ROOT=${KATAS}
  export CYBER_DOJO_RUNNER_CLASS=${RUNNER}
  export CYBER_DOJO_KATAS_CLASS=HostDiskKatas
  export CYBER_DOJO_SHELL_CLASS=HostShell
  export CYBER_DOJO_DISK_CLASS=HostDisk
  export CYBER_DOJO_LOG_CLASS=HostLog
  export CYBER_DOJO_GIT_CLASS=HostGit
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  pushd ${DIR} > /dev/null
  # TODO: curl download docker-compose.yml
  docker-compose \
    --file=./docker-compose.yml \
    up &
  popd > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - -

if [  $# -eq 0 ]; then
  show_use
  exit
fi

for arg in "$@"
do
  case ${arg} in
    help)
      show_use
      exit
      ;;
    bootstrap)
      doBootstrap=true
      ;;
    ls)
      doLs=true
      ;;
    latest)
      doLatest=true
      ;;
    pull=*)
      IMAGE="${arg#*=}"
      doPull=true
      ;;
    up)
      doUp=true
      ;;
    katas=*)
      KATAS="${arg#*=}"
      exit_if_bad_katas
      ;;
    runner=*)
      RUNNER="${arg#*=}"
      exit_if_bad_runner
      ;;
    rails_env=*)
      RAILS_ENV="${arg#*=}"
      exit_if_bad_rails_env
      ;;
    *)
      echo "${ME}: ${arg} ?"
      echo "See '${ME} help"
      exit
      ;;
  esac
done

# - - - - - - - - - - - - - - - - - - - - - -

if [ "$doBootstrap" == true ]; then  bootstrap; exit; fi
if [ "$doLs"        == true ]; then         ls; exit; fi
if [ "$doPull"      == true ]; then       pull; exit; fi
if [ "$doLatest"    == true ]; then     latest; exit; fi
if [ "$doUp"        == true ]; then         up; exit; fi

