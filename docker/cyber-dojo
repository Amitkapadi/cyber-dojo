#!/bin/sh
set -e

HOME=/usr/src/cyber-dojo         # home folder *inside* the server image
REPO=cyberdojofoundation         # username on docker hub

KATAS_DEFAULT=${HOME}/katas
RAILS_ENV_DEFAULT=development    # TODO: FAILS for production!
RUNNER_DEFAULT=DockerTmpRunner

KATAS=${KATAS_DEFAULT}           # where katas are stored on the *host*
RAILS_ENV=${RAILS_ENV_DEFAULT}   # rails server -e ${RAILS_ENV}
RUNNER=${RUNNER_DEFAULT}         # See app/models/dojo.rb

ME="./$( basename ${0} )"
MY_DIR="$( cd "$( dirname "${0}" )" && pwd )"

DOCKER_COMPOSE_FILE=cyber-dojo-docker-compose.yml
DOCKER_COMPOSE_CMD="docker-compose --file=./${DOCKER_COMPOSE_FILE}"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# TODO: detect if more than one command entered
# TODO: pull all language images == fetch? all?
# TODO: repo -> ls? -> lsi ?
# TODO: bootstrap= install_docker + pull_all_languages + up
# TODO: bootstrap= install_docker + pull_few_languages + up
#

show_use()
{
  echo
  echo "Usage: ${ME} COMMAND"
  echo "       ${ME} help"
  echo
  echo 'Commands:'
  echo '    install_docker    Installs docker, docker-machine, and docker-compose'
  echo
  echo '    ps                Lists server containers'
  echo '    start             Starts the server containers'
  echo '    stop              Stops the server containers'
  echo '    rm                Removes the server containers'
  echo '    up [OPTIONS]      Creates and starts the server containers'
  echo
  echo '    images            Lists pulled language images'
  echo '    pull=IMAGE        Pulls language IMAGE'
  echo '    repo              Lists all language images'
  echo '    rmi=IMAGE         Removes a pulled language IMAGE'
  echo '    upgrade           Pulls the latest server and language images'
  echo
  echo 'up [OPTIONS]:'
  echo "    katas=/var/www/cyber-dojo/katas            default: katas=${KATAS}"
  echo "    rails_env=[development|production]         default: rails_env=${RAILS_ENV_DEFAULT}"
  echo "    runner=[DockerTmpRunner|DockerKatasRunner] default: runner=${RUNNER_DEFAULT}"
  echo
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# INSTALL DOCKER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

INSTALL_DOCKER_CURL_CMD="curl -sSL https://get.docker.com/ | sh"

show_how_to_install_docker()
{
  echo
  echo 'To install docker:'
  echo "$ ${ME} install_docker"
  echo 'which does'
  echo "$ ${INSTALL_DOCKER_CURL_CMD}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

INSTALL_DOCKER_MACHINE_CURL_CMD="curl -L https://github.com/docker/machine/releases/download/v0.6.0/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine"
INSTALL_DOCKER_MACHINE_CHMOD_CMD="chmod +x /usr/local/bin/docker-machine"

show_how_to_install_docker_machine()
{
  echo
  echo 'To install docker-machine:'
  echo "$ ${ME} install_docker"
  echo 'which does'
  echo "$ ${INSTALL_DOCKER_MACHINE_CURL_CMD}"
  echo "$ ${INSTALL_DOCKER_MACHINE_CHMOD_CMD}"
  echo 'To check for new releases visit https://docs.docker.com/machine/install-machine/'
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

INSTALL_DOCKER_COMPOSE_CURL_CMD="curl -L https://github.com/docker/compose/releases/download/1.6.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose"
INSTALL_DOCKER_COMPOSE_CHMOD_CMD="chmod +x /usr/local/bin/docker-compose"

show_how_to_install_docker_compose()
{
  echo
  echo 'To install docker-compose:'
  echo "$ ${ME} install_docker"
  echo 'which does'
  echo "$ ${INSTALL_DOCKER_COMPOSE_CURL_CMD}"
  echo "$ ${INSTALL_DOCKER_COMPOSE_CHMOD_CMD}"
  echo 'To check for new releases visit https://github.com/docker/compose/releases'
}

#========================================================================================
# CONTAINERS
#========================================================================================

ps()
{
  # why does it warn unless env-vars are set?
  setup_env_vars
  ${DOCKER_COMPOSE_CMD} ps
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

start()
{
  setup_env_vars
  ${DOCKER_COMPOSE_CMD} start
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

stop()
{
  setup_env_vars
  ${DOCKER_COMPOSE_CMD} stop
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rm()
{
  ${DOCKER_COMPOSE_CMD} stop
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

up()
{
  # TODO: test in main flow?
  exit_if_bad_katas
  exit_if_bad_runner
  exit_if_bad_rails_env
  pull_common_languages_if_none
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  ${DOCKER_COMPOSE_CMD} up -d
  cd "${CWD}" > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - - - - -

exit_if_bad_rails_env()
{
  if [ "${RAILS_ENV}" != 'development' ] &&
     [ "${RAILS_ENV}" != 'production' ];
  then
    echo "${ME}: rails_env=${RAILS_ENV} ?"
    echo "See ${ME} help"
    exit
  fi
  if [ "${RAILS_ENV}" == 'production' ]; then
    # <<<<<<< TODO >>>>>>>>
    echo 'up rails_env=production'
    echo '>>>> not supported yet'
    echo '>>>> Dockerfile currently hard-wires development'
    echo '>>>> up abandoned'
    exit
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - -

exit_if_bad_katas()
{
  # if KATAS == KATAS_DEFAULT assume this cyber-dojo server is *not*
  # being hosted where a previous (non dockerized) server lived.
  # In this case the KATAS volume mount in docker-compose.yml will
  # *create* the KATAS_DEFAULT directory on the host.
  #
  # if KATAS != KATAS_DEFAULT assume this cyber-dojo server (*is*)
  # being hosted where a previous (no dockerized) server lived.
  # TODO: if volume-mounting: check user cyber-dojo,uid=19661 exists
  # TODO: if volume-mounting: check katas folder owned by cyber-dojo user

  if [ "${KATAS}" != "${KATAS_DEFAULT}" ] && [ ! -d "${KATAS}" ]; then
    echo "${ME}: katas=${KATAS} ? ${KATAS} directory does not exist"
    echo "See ${ME} help"
    exit
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - -

exit_if_bad_runner()
{
  if [ "${RUNNER}" != 'DockerTmpRunner' ] &&
     [ "${RUNNER}" != 'DockerKatasRunner' ];
  then
    echo "${ME}: runner=${RUNNER} ?"
    echo "See ${ME} help"
    exit
  fi
}

#========================================================================================
# IMAGES
#========================================================================================

pulled_language_images()
{
  ALL_LANGUAGE_IMAGES=`echo "${LS_REPO}" | awk '{print $NF}' | sort`
  PULLED_IMAGES=`docker images | grep ${REPO} | awk '{print $1}'`
  SPLIT=$(echo "${PULLED_IMAGES}" | sed 's/\// /g')
  PULLED_IMAGES=`echo "${SPLIT}" | awk '{print $NF}' | sort`

  TMP_FILE_1=/tmp/cyber-dojo.comm1.txt
  TMP_FILE_2=/tmp/cyber-dojo.comm2.txt
  echo "${ALL_LANGUAGE_IMAGES}" > ${TMP_FILE_1}
  echo       "${PULLED_IMAGES}" > ${TMP_FILE_2}
  PULLED_LANGUAGE_IMAGES=`comm -12 ${TMP_FILE_1} ${TMP_FILE_2}`
  rm ${TMP_FILE_1}
  rm ${TMP_FILE_2}

  echo "${PULLED_LANGUAGE_IMAGES}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

images()
{
  echo './cyber-dojo images OFFLINE-BUG-NEEDS-FIXING'
  # FIXME: this stops two services
  #   Stopping cyber-dojo-nginx ... done
  #   Stopping cyber-dojo-server ... done
  # It's the line
  # PULLED=`pulled_language_images`
  #
  # FIXME: this gives the same as ls_repo when there are no languages pulled

  #LS_REPO=`repo`
  #PULLED=`pulled_language_images`
  #echo "${LS_REPO}" | grep 'LANGUAGE'
  #echo "${LS_REPO}" | grep "${PULLED}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

install_docker()
{
  echo 'installing docker'
  eval ${INSTALL_DOCKER_CURL_CMD}
  echo 'installing docker-machine'
  eval ${INSTALL_DOCKER_MACHINE_CURL_CMD}
  eval ${INSTALL_DOCKER_MACHINE_CHMOD_CMD}
  echo 'installing docker-compose'
  eval ${INSTALL_DOCKER_COMPOSE_CURL_CMD}
  eval ${INSTALL_DOCKER_COMPOSE_CHMOD_CMD}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pull()
{
  docker pull ${REPO}/${IMAGE}:latest
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

repo()
{
  # will pull web image if necessary
  docker run --rm ${REPO}/web sh -c "./app/languages/list_all_images.rb"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# rm()
# {
#   ${DOCKER_COMPOSE_CMD} rm
# }

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

rmi()
{
  docker rmi ${REPO}/${IMAGE}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

pull_common_languages_if_none()
{
  LS_REPO=`repo`
  PULLED=`pulled_language_images`
  if [ -z "${PULLED}" ]; then
    echo 'No language images pulled'
    echo 'Pulling a small starting collection of common language images'
    IMAGE=gcc_assert
    pull
    #IMAGE=ruby_mini_test
    #pull
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

upgrade()
{
  echo "downloading latest ${DOCKER_COMPOSE_FILE} file"
  download_latest_docker_compose_yml
  echo 'upgrading cyber-dojo server images'
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  SERVICES=`${DOCKER_COMPOSE_CMD} config --services 2> /dev/null`
  cd "${CWD}" > /dev/null
  echo "${SERVICES}" | while read IMAGE ; do
    pull
  done

  echo 'upgrading cyber-dojo pulled language images'
  LS_REPO=`repo`
  PULLED=`pulled_language_images`
  echo "${PULLED}" | while read IMAGE ; do
    pull
  done
}

download_latest_docker_compose_yml()
{
  CWD=`pwd`
  cd "${MY_DIR}" > /dev/null
  curl -O https://raw.githubusercontent.com/JonJagger/cyber-dojo/master/docker/${DOCKER_COMPOSE_FILE}
  cd "${CWD}" > /dev/null
}

#========================================================================================
# PROCESS COMMAND LINE ARGS
#========================================================================================

for ARG in "$@"
do
  case ${ARG} in
    help)
      show_use
      exit
      ;;
    install_docker)
      doInstall=true
      ;;
    # - - - - - - - CONTAINERS - - - - - - - -
    ps)
      doPs=true
      ;;
    start)
      doStart=true
      ;;
    stop)
      doStop=true
      ;;
    rm)
      doRm=true
      ;;
    up)
      doUp=true
      ;;
    # - - - - - - - OPTIONS - - - - - - - -
    katas=*)
      KATAS="${ARG#*=}"
      ;;
    runner=*)
      RUNNER="${ARG#*=}"
      ;;
    rails_env=*)
      RAILS_ENV="${ARG#*=}"
      ;;
    # - - - - - - - IMAGES - - - - - - - -
    images)
      doImages=true
      ;;
    pull=*)
      IMAGE="${ARG#*=}"
      doPull=true
      ;;
    repo)
      doRepo=true
      ;;
    rmi=*)
      IMAGE="${ARG#*=}"
      doRmi=true
      ;;
    upgrade)
      doUpgrade=true
      ;;
    # - - - - - - - SOMETHING'S NOT RIGHT - - - - - - - -
    *)
      echo "${ME}: ${ARG} ?"
      echo "See '${ME} help"
      exit
      ;;
  esac
done

#========================================================================================
# INSTALL DOCKER OR SAY HOW TO
#========================================================================================

if [ -n "${doInstall}" ]; then
  install_docker
  exit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hash docker 2> /dev/null
if [ $? != 0  ]; then
  echo
  echo 'cyber-dojo requires docker'
  show_how_to_install_docker
  show_how_to_install_docker_machine
  show_how_to_install_docker_compose
  echo
  exit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hash docker-machine 2> /dev/null
if [  $? != 0 ]; then
  echo
  echo 'cyber-dojo requires docker-machine'
  show_how_to_install_docker_machine
  echo
  exit
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hash docker-compose 2> /dev/null
if [  $? != 0 ]; then
  echo
  echo 'cyber-dojo requires docker-compose'
  show_how_to_install_docker_compose
  echo
  exit
fi

#========================================================================================
# NOTHING IS IMPLICIT
#========================================================================================

if [ $# -eq 0 ]; then
  show_use
  exit
fi

#========================================================================================
# YOU MUST HAVE THE YML FILE
#========================================================================================

if [ ! -e ${MY_DIR}/${DOCKER_COMPOSE_FILE} ]; then
  download_latest_docker_compose_yml
fi

#========================================================================================
# YML FILES RELIES ON THESE ENV-VARS
#========================================================================================

export CYBER_DOJO_RAILS_ENV=${RAILS_ENV}
export CYBER_DOJO_LANGUAGES_ROOT=${HOME}/app/languages
export CYBER_DOJO_EXERCISES_ROOT=${HOME}/app/exercises
export CYBER_DOJO_CACHES_ROOT=${HOME}/app/caches
export CYBER_DOJO_KATAS_ROOT=${KATAS}
export CYBER_DOJO_RUNNER_CLASS=${RUNNER}
export CYBER_DOJO_KATAS_CLASS=HostDiskKatas
export CYBER_DOJO_SHELL_CLASS=HostShell
export CYBER_DOJO_DISK_CLASS=HostDisk
export CYBER_DOJO_LOG_CLASS=HostLog
export CYBER_DOJO_GIT_CLASS=HostGit

#========================================================================================
# DO SOMETHING!
#========================================================================================

if [ -n "${doPs}"      ]; then ps     ; exit; fi
if [ -n "${doStart}"   ]; then start  ; exit; fi
if [ -n "${doStop}"    ]; then stop   ; exit; fi
if [ -n "${doRm}"      ]; then rm     ; exit; fi
if [ -n "${doUp}"      ]; then up     ; exit; fi

if [ -n "${doImages}"  ]; then images ; exit; fi
if [ -n "${doPull}"    ]; then pull   ; exit; fi
if [ -n "${doRepo}"    ]; then repo   ; exit; fi
if [ -n "${doRmi}"     ]; then rmi    ; exit; fi
if [ -n "${doUpgrade}" ]; then upgrade; exit; fi
