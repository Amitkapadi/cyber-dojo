#!/bin/sh

# TODO: check docker installed
# TODO: check docker-compose is installed

HOME=/usr/app/cyber-dojo          # home folder inside the web-image
HUB=cyberdojofoundation           # docker hub username

# defaults
RAILS_ENV_DEFAULT=production
RUNNER_DEFAULT=DockerTmpRunner

KATAS=/usr/app/cyber-dojo/katas
RAILS_ENV=${RAILS_ENV_DEFAULT}
RUNNER=${RUNNER_DEFAULT}

ME="$(basename $0)"

# - - - - - - - - - - - - - - - - - - - - - -

function show_use
{
  echo
  echo "Usage: ${ME} COMMAND"
  echo "       ${ME} help"
  echo
  echo 'Commands:'
  echo '    latest            Repull pulled language images'
  echo '    ls                List pulled cyber-dojo language images'
  echo '    ls_hub            List all available language images'
  echo '    pull=IMAGE        Pull cyber-dojo language IMAGE'
  echo '    up [OPTIONS]      Bring up cyber-dojo server'
  echo
  echo 'Options:'
  echo "    katas=PATH                                 (default=${KATAS})"
  echo "    rails_env=[development|production]         (default=${RAILS_ENV_DEFAULT})"
  echo "    runner=[DockerTmpRunner|DockerKatasRunner] (default=${RUNNER_DEFAULT})"
  echo
}

function exit_if_bad_rails_env
{
  if [ "${RAILS_ENV}" != 'development' ] && [ "${RAILS_ENV}" != 'production' ]; then
    echo "${ME}: rails_env=${RAILS_ENV} ?"
    echo "See ${ME} help"
    exit
  fi
}

function exit_if_bad_katas
{
  # Explicitly specified katas PATH corresponds to volume-mounting
  # an existing katas folder from old-style cyber-dojo server.
  #
  # TODO: if this is a new server does the default katas PATH have to exist?
  #       does the volume-mount create it if its not there?

  true
}

function exit_if_bad_runner
{
  if [ "${RUNNER}" != 'DockerTmpRunner' ] && [ "${RUNNER}" != 'DockerKatasRunner' ]; then
    echo "${ME}: runner=${RUNNER} ?"
    echo "See ${ME} help"
    exit
  fi
}

# - - - - - - - - - - - - - - - - - - - - - -

function pulled_language_images
{
  ALL_LANGUAGE_IMAGES=`ls_hub | awk '{print $NF}' | sort`
  PULLED_IMAGES=`docker images | grep ${HUB} | awk '{print $1}'`
  SPLIT=${PULLED_IMAGES//\/// }
  PULLED_IMAGES=`echo "${SPLIT}" | awk '{print $NF}' | sort`

  TMP_FILE_1=/tmp/cyber-dojo.comm1.txt
  TMP_FILE_2=/tmp/cyber-dojo.comm2.txt
  echo "${ALL_LANGUAGE_IMAGES}" > ${TMP_FILE_1}
  echo       "${PULLED_IMAGES}" > ${TMP_FILE_2}
  PULLED_LANGUAGE_IMAGES=`comm -12 /tmp/cyber-dojo.comm1.txt /tmp/cyber-dojo.comm2.txt`
  rm ${TMP_FILE_1}
  rm ${TMP_FILE_2}

  echo "${PULLED_LANGUAGE_IMAGES}"
}

function ls
{
  PULLED=`pulled_language_images`
  docker images | grep "$PULLED"
}

function ls_hub
{
  docker run --rm ${HUB}/web bash -c "./languages/list_all_images.rb"
}

# - - - - - - - - - - - - - - - - - - - - - -

function pull
{
  docker pull ${HUB}/${IMAGE}:latest
}

# - - - - - - - - - - - - - - - - - - - - - -

function latest
{
  PULLED=`pulled_language_images`
  for IMAGE in ${PULLED[*]}
  do
    pull ${IMAGE}
  done
}

# - - - - - - - - - - - - - - - - - - - - - -

function pull_common_languages
{
  IMAGES=(gcc_assert ruby_mini_test)
  for IMAGE in ${IMAGES[*]}
  do
    pull ${IMAGE}
  done
}

function up
{
  # TODO: install common language images if no languages

  # TODO: curl download latest docker-compose.yml

  export CYBER_DOJO_RAILS_ENV=${RAILS_ENV}
  export CYBER_DOJO_LANGUAGES_ROOT=${HOME}/languages
  export CYBER_DOJO_EXERCISES_ROOT=${HOME}/exercises
  export CYBER_DOJO_CACHES_ROOT=${HOME}/caches
  export CYBER_DOJO_KATAS_ROOT=${KATAS}
  export CYBER_DOJO_RUNNER_CLASS=${RUNNER}
  export CYBER_DOJO_KATAS_CLASS=HostDiskKatas
  export CYBER_DOJO_SHELL_CLASS=HostShell
  export CYBER_DOJO_DISK_CLASS=HostDisk
  export CYBER_DOJO_LOG_CLASS=HostLog
  export CYBER_DOJO_GIT_CLASS=HostGit
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  pushd ${DIR} > /dev/null
  docker-compose \
    --file=./docker-compose.yml \
    up &
  popd > /dev/null
}

# - - - - - - - - - - - - - - - - - - - - - -

if [  $# -eq 0 ]; then
  show_use
  exit
fi

for arg in "$@"
do
  case ${arg} in
    help)
      show_use
      exit
      ;;
    latest)
      doLatest=true
      ;;
    ls)
      doLs=true
      ;;
    ls_hub)
      doLsHub=true
      ;;
    pull=*)
      IMAGE="${arg#*=}"
      doPull=true
      ;;
    up)
      doUp=true
      ;;
    katas=*)
      KATAS="${arg#*=}"
      exit_if_bad_katas
      ;;
    runner=*)
      RUNNER="${arg#*=}"
      exit_if_bad_runner
      ;;
    rails_env=*)
      RAILS_ENV="${arg#*=}"
      exit_if_bad_rails_env
      ;;
    *)
      echo "${ME}: ${arg} ?"
      echo "See '${ME} help"
      exit
      ;;
  esac
done

# - - - - - - - - - - - - - - - - - - - - - -

if [ "$doLatest"    == true ]; then     latest; exit; fi
if [ "$doLs"        == true ]; then         ls; exit; fi
if [ "$doLsHub"     == true ]; then     ls_hub; exit; fi
if [ "$doPull"      == true ]; then       pull; exit; fi
if [ "$doUp"        == true ]; then         up; exit; fi

